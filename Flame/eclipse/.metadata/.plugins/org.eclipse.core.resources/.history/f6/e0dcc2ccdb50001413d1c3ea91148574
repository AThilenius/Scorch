package com.thilenius.flame.service.thrift;

import com.thilenius.flame.service.thrift.genfiles.FlameService;

public class FlameServiceServer {

	public static FlameServiceHandler FlameHandler;
	public static FlameService.Processor FlameProcessor;

	public FlameServiceServer() {

		try {
			FlameHandler = new FlameServiceHandler();
			FlameProcessor = new FlameService.Processor(FlameHandler);

			Runnable simple = new Runnable() {
				public void run() {
					simple(FlameProcessor);
				}
			};
			Runnable secure = new Runnable() {
				public void run() {
					secure(processor);
				}
			};

			new Thread(simple).start();
			new Thread(secure).start();
		} catch (Exception x) {
			x.printStackTrace();
		}
	}

	public static void simple(Calculator.Processor processor) {
		try {
			TServerTransport serverTransport = new TServerSocket(9090);
			TServer server = new TSimpleServer(
					new Args(serverTransport).processor(processor));

			// Use this for a multithreaded server
			// TServer server = new TThreadPoolServer(new
			// TThreadPoolServer.Args(serverTransport).processor(processor));

			System.out.println("Starting the simple server...");
			server.serve();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
