/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thilenius.flame.service.thrift.genfiles;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FlameService {

  public interface Iface {

    public Spark CreateSpark(Location worldLocation) throws org.apache.thrift.TException;

    public List<Spark> GetAllSparks() throws org.apache.thrift.TException;

    public void RemoveSpark(Spark sparkToRemove) throws org.apache.thrift.TException;

    public void RemoveAllSparks() throws org.apache.thrift.TException;

    public boolean DispatchMovementCommand(Spark spark, MovementTypes movementCommand) throws org.apache.thrift.TException;

    public void DispatchOrientationCommand(Spark spark, OrientationTypes orientationCommand) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void CreateSpark(Location worldLocation, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetAllSparks(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void RemoveSpark(Spark sparkToRemove, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void RemoveAllSparks(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void DispatchMovementCommand(Spark spark, MovementTypes movementCommand, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void DispatchOrientationCommand(Spark spark, OrientationTypes orientationCommand, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Spark CreateSpark(Location worldLocation) throws org.apache.thrift.TException
    {
      send_CreateSpark(worldLocation);
      return recv_CreateSpark();
    }

    public void send_CreateSpark(Location worldLocation) throws org.apache.thrift.TException
    {
      CreateSpark_args args = new CreateSpark_args();
      args.setWorldLocation(worldLocation);
      sendBase("CreateSpark", args);
    }

    public Spark recv_CreateSpark() throws org.apache.thrift.TException
    {
      CreateSpark_result result = new CreateSpark_result();
      receiveBase(result, "CreateSpark");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CreateSpark failed: unknown result");
    }

    public List<Spark> GetAllSparks() throws org.apache.thrift.TException
    {
      send_GetAllSparks();
      return recv_GetAllSparks();
    }

    public void send_GetAllSparks() throws org.apache.thrift.TException
    {
      GetAllSparks_args args = new GetAllSparks_args();
      sendBase("GetAllSparks", args);
    }

    public List<Spark> recv_GetAllSparks() throws org.apache.thrift.TException
    {
      GetAllSparks_result result = new GetAllSparks_result();
      receiveBase(result, "GetAllSparks");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetAllSparks failed: unknown result");
    }

    public void RemoveSpark(Spark sparkToRemove) throws org.apache.thrift.TException
    {
      send_RemoveSpark(sparkToRemove);
      recv_RemoveSpark();
    }

    public void send_RemoveSpark(Spark sparkToRemove) throws org.apache.thrift.TException
    {
      RemoveSpark_args args = new RemoveSpark_args();
      args.setSparkToRemove(sparkToRemove);
      sendBase("RemoveSpark", args);
    }

    public void recv_RemoveSpark() throws org.apache.thrift.TException
    {
      RemoveSpark_result result = new RemoveSpark_result();
      receiveBase(result, "RemoveSpark");
      return;
    }

    public void RemoveAllSparks() throws org.apache.thrift.TException
    {
      send_RemoveAllSparks();
      recv_RemoveAllSparks();
    }

    public void send_RemoveAllSparks() throws org.apache.thrift.TException
    {
      RemoveAllSparks_args args = new RemoveAllSparks_args();
      sendBase("RemoveAllSparks", args);
    }

    public void recv_RemoveAllSparks() throws org.apache.thrift.TException
    {
      RemoveAllSparks_result result = new RemoveAllSparks_result();
      receiveBase(result, "RemoveAllSparks");
      return;
    }

    public boolean DispatchMovementCommand(Spark spark, MovementTypes movementCommand) throws org.apache.thrift.TException
    {
      send_DispatchMovementCommand(spark, movementCommand);
      return recv_DispatchMovementCommand();
    }

    public void send_DispatchMovementCommand(Spark spark, MovementTypes movementCommand) throws org.apache.thrift.TException
    {
      DispatchMovementCommand_args args = new DispatchMovementCommand_args();
      args.setSpark(spark);
      args.setMovementCommand(movementCommand);
      sendBase("DispatchMovementCommand", args);
    }

    public boolean recv_DispatchMovementCommand() throws org.apache.thrift.TException
    {
      DispatchMovementCommand_result result = new DispatchMovementCommand_result();
      receiveBase(result, "DispatchMovementCommand");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DispatchMovementCommand failed: unknown result");
    }

    public void DispatchOrientationCommand(Spark spark, OrientationTypes orientationCommand) throws org.apache.thrift.TException
    {
      send_DispatchOrientationCommand(spark, orientationCommand);
      recv_DispatchOrientationCommand();
    }

    public void send_DispatchOrientationCommand(Spark spark, OrientationTypes orientationCommand) throws org.apache.thrift.TException
    {
      DispatchOrientationCommand_args args = new DispatchOrientationCommand_args();
      args.setSpark(spark);
      args.setOrientationCommand(orientationCommand);
      sendBase("DispatchOrientationCommand", args);
    }

    public void recv_DispatchOrientationCommand() throws org.apache.thrift.TException
    {
      DispatchOrientationCommand_result result = new DispatchOrientationCommand_result();
      receiveBase(result, "DispatchOrientationCommand");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void CreateSpark(Location worldLocation, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CreateSpark_call method_call = new CreateSpark_call(worldLocation, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateSpark_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Location worldLocation;
      public CreateSpark_call(Location worldLocation, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.worldLocation = worldLocation;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateSpark", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateSpark_args args = new CreateSpark_args();
        args.setWorldLocation(worldLocation);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Spark getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CreateSpark();
      }
    }

    public void GetAllSparks(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetAllSparks_call method_call = new GetAllSparks_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetAllSparks_call extends org.apache.thrift.async.TAsyncMethodCall {
      public GetAllSparks_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetAllSparks", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetAllSparks_args args = new GetAllSparks_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Spark> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetAllSparks();
      }
    }

    public void RemoveSpark(Spark sparkToRemove, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RemoveSpark_call method_call = new RemoveSpark_call(sparkToRemove, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RemoveSpark_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Spark sparkToRemove;
      public RemoveSpark_call(Spark sparkToRemove, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sparkToRemove = sparkToRemove;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RemoveSpark", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RemoveSpark_args args = new RemoveSpark_args();
        args.setSparkToRemove(sparkToRemove);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_RemoveSpark();
      }
    }

    public void RemoveAllSparks(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RemoveAllSparks_call method_call = new RemoveAllSparks_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RemoveAllSparks_call extends org.apache.thrift.async.TAsyncMethodCall {
      public RemoveAllSparks_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RemoveAllSparks", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RemoveAllSparks_args args = new RemoveAllSparks_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_RemoveAllSparks();
      }
    }

    public void DispatchMovementCommand(Spark spark, MovementTypes movementCommand, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DispatchMovementCommand_call method_call = new DispatchMovementCommand_call(spark, movementCommand, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DispatchMovementCommand_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Spark spark;
      private MovementTypes movementCommand;
      public DispatchMovementCommand_call(Spark spark, MovementTypes movementCommand, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spark = spark;
        this.movementCommand = movementCommand;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DispatchMovementCommand", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DispatchMovementCommand_args args = new DispatchMovementCommand_args();
        args.setSpark(spark);
        args.setMovementCommand(movementCommand);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DispatchMovementCommand();
      }
    }

    public void DispatchOrientationCommand(Spark spark, OrientationTypes orientationCommand, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DispatchOrientationCommand_call method_call = new DispatchOrientationCommand_call(spark, orientationCommand, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DispatchOrientationCommand_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Spark spark;
      private OrientationTypes orientationCommand;
      public DispatchOrientationCommand_call(Spark spark, OrientationTypes orientationCommand, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spark = spark;
        this.orientationCommand = orientationCommand;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DispatchOrientationCommand", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DispatchOrientationCommand_args args = new DispatchOrientationCommand_args();
        args.setSpark(spark);
        args.setOrientationCommand(orientationCommand);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_DispatchOrientationCommand();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("CreateSpark", new CreateSpark());
      processMap.put("GetAllSparks", new GetAllSparks());
      processMap.put("RemoveSpark", new RemoveSpark());
      processMap.put("RemoveAllSparks", new RemoveAllSparks());
      processMap.put("DispatchMovementCommand", new DispatchMovementCommand());
      processMap.put("DispatchOrientationCommand", new DispatchOrientationCommand());
      return processMap;
    }

    public static class CreateSpark<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateSpark_args> {
      public CreateSpark() {
        super("CreateSpark");
      }

      public CreateSpark_args getEmptyArgsInstance() {
        return new CreateSpark_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CreateSpark_result getResult(I iface, CreateSpark_args args) throws org.apache.thrift.TException {
        CreateSpark_result result = new CreateSpark_result();
        result.success = iface.CreateSpark(args.worldLocation);
        return result;
      }
    }

    public static class GetAllSparks<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetAllSparks_args> {
      public GetAllSparks() {
        super("GetAllSparks");
      }

      public GetAllSparks_args getEmptyArgsInstance() {
        return new GetAllSparks_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetAllSparks_result getResult(I iface, GetAllSparks_args args) throws org.apache.thrift.TException {
        GetAllSparks_result result = new GetAllSparks_result();
        result.success = iface.GetAllSparks();
        return result;
      }
    }

    public static class RemoveSpark<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RemoveSpark_args> {
      public RemoveSpark() {
        super("RemoveSpark");
      }

      public RemoveSpark_args getEmptyArgsInstance() {
        return new RemoveSpark_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public RemoveSpark_result getResult(I iface, RemoveSpark_args args) throws org.apache.thrift.TException {
        RemoveSpark_result result = new RemoveSpark_result();
        iface.RemoveSpark(args.sparkToRemove);
        return result;
      }
    }

    public static class RemoveAllSparks<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RemoveAllSparks_args> {
      public RemoveAllSparks() {
        super("RemoveAllSparks");
      }

      public RemoveAllSparks_args getEmptyArgsInstance() {
        return new RemoveAllSparks_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public RemoveAllSparks_result getResult(I iface, RemoveAllSparks_args args) throws org.apache.thrift.TException {
        RemoveAllSparks_result result = new RemoveAllSparks_result();
        iface.RemoveAllSparks();
        return result;
      }
    }

    public static class DispatchMovementCommand<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DispatchMovementCommand_args> {
      public DispatchMovementCommand() {
        super("DispatchMovementCommand");
      }

      public DispatchMovementCommand_args getEmptyArgsInstance() {
        return new DispatchMovementCommand_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DispatchMovementCommand_result getResult(I iface, DispatchMovementCommand_args args) throws org.apache.thrift.TException {
        DispatchMovementCommand_result result = new DispatchMovementCommand_result();
        result.success = iface.DispatchMovementCommand(args.spark, args.movementCommand);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class DispatchOrientationCommand<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DispatchOrientationCommand_args> {
      public DispatchOrientationCommand() {
        super("DispatchOrientationCommand");
      }

      public DispatchOrientationCommand_args getEmptyArgsInstance() {
        return new DispatchOrientationCommand_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DispatchOrientationCommand_result getResult(I iface, DispatchOrientationCommand_args args) throws org.apache.thrift.TException {
        DispatchOrientationCommand_result result = new DispatchOrientationCommand_result();
        iface.DispatchOrientationCommand(args.spark, args.orientationCommand);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("CreateSpark", new CreateSpark());
      processMap.put("GetAllSparks", new GetAllSparks());
      processMap.put("RemoveSpark", new RemoveSpark());
      processMap.put("RemoveAllSparks", new RemoveAllSparks());
      processMap.put("DispatchMovementCommand", new DispatchMovementCommand());
      processMap.put("DispatchOrientationCommand", new DispatchOrientationCommand());
      return processMap;
    }

    public static class CreateSpark<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CreateSpark_args, Spark> {
      public CreateSpark() {
        super("CreateSpark");
      }

      public CreateSpark_args getEmptyArgsInstance() {
        return new CreateSpark_args();
      }

      public AsyncMethodCallback<Spark> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Spark>() { 
          public void onComplete(Spark o) {
            CreateSpark_result result = new CreateSpark_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            CreateSpark_result result = new CreateSpark_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CreateSpark_args args, org.apache.thrift.async.AsyncMethodCallback<Spark> resultHandler) throws TException {
        iface.CreateSpark(args.worldLocation,resultHandler);
      }
    }

    public static class GetAllSparks<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetAllSparks_args, List<Spark>> {
      public GetAllSparks() {
        super("GetAllSparks");
      }

      public GetAllSparks_args getEmptyArgsInstance() {
        return new GetAllSparks_args();
      }

      public AsyncMethodCallback<List<Spark>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Spark>>() { 
          public void onComplete(List<Spark> o) {
            GetAllSparks_result result = new GetAllSparks_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetAllSparks_result result = new GetAllSparks_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetAllSparks_args args, org.apache.thrift.async.AsyncMethodCallback<List<Spark>> resultHandler) throws TException {
        iface.GetAllSparks(resultHandler);
      }
    }

    public static class RemoveSpark<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, RemoveSpark_args, Void> {
      public RemoveSpark() {
        super("RemoveSpark");
      }

      public RemoveSpark_args getEmptyArgsInstance() {
        return new RemoveSpark_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            RemoveSpark_result result = new RemoveSpark_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            RemoveSpark_result result = new RemoveSpark_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, RemoveSpark_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.RemoveSpark(args.sparkToRemove,resultHandler);
      }
    }

    public static class RemoveAllSparks<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, RemoveAllSparks_args, Void> {
      public RemoveAllSparks() {
        super("RemoveAllSparks");
      }

      public RemoveAllSparks_args getEmptyArgsInstance() {
        return new RemoveAllSparks_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            RemoveAllSparks_result result = new RemoveAllSparks_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            RemoveAllSparks_result result = new RemoveAllSparks_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, RemoveAllSparks_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.RemoveAllSparks(resultHandler);
      }
    }

    public static class DispatchMovementCommand<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DispatchMovementCommand_args, Boolean> {
      public DispatchMovementCommand() {
        super("DispatchMovementCommand");
      }

      public DispatchMovementCommand_args getEmptyArgsInstance() {
        return new DispatchMovementCommand_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            DispatchMovementCommand_result result = new DispatchMovementCommand_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DispatchMovementCommand_result result = new DispatchMovementCommand_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DispatchMovementCommand_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.DispatchMovementCommand(args.spark, args.movementCommand,resultHandler);
      }
    }

    public static class DispatchOrientationCommand<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DispatchOrientationCommand_args, Void> {
      public DispatchOrientationCommand() {
        super("DispatchOrientationCommand");
      }

      public DispatchOrientationCommand_args getEmptyArgsInstance() {
        return new DispatchOrientationCommand_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            DispatchOrientationCommand_result result = new DispatchOrientationCommand_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DispatchOrientationCommand_result result = new DispatchOrientationCommand_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DispatchOrientationCommand_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.DispatchOrientationCommand(args.spark, args.orientationCommand,resultHandler);
      }
    }

  }

  public static class CreateSpark_args implements org.apache.thrift.TBase<CreateSpark_args, CreateSpark_args._Fields>, java.io.Serializable, Cloneable, Comparable<CreateSpark_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateSpark_args");

    private static final org.apache.thrift.protocol.TField WORLD_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("worldLocation", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateSpark_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateSpark_argsTupleSchemeFactory());
    }

    public Location worldLocation; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WORLD_LOCATION((short)1, "worldLocation");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WORLD_LOCATION
            return WORLD_LOCATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WORLD_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("worldLocation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Location.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateSpark_args.class, metaDataMap);
    }

    public CreateSpark_args() {
    }

    public CreateSpark_args(
      Location worldLocation)
    {
      this();
      this.worldLocation = worldLocation;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateSpark_args(CreateSpark_args other) {
      if (other.isSetWorldLocation()) {
        this.worldLocation = new Location(other.worldLocation);
      }
    }

    public CreateSpark_args deepCopy() {
      return new CreateSpark_args(this);
    }

    @Override
    public void clear() {
      this.worldLocation = null;
    }

    public Location getWorldLocation() {
      return this.worldLocation;
    }

    public CreateSpark_args setWorldLocation(Location worldLocation) {
      this.worldLocation = worldLocation;
      return this;
    }

    public void unsetWorldLocation() {
      this.worldLocation = null;
    }

    /** Returns true if field worldLocation is set (has been assigned a value) and false otherwise */
    public boolean isSetWorldLocation() {
      return this.worldLocation != null;
    }

    public void setWorldLocationIsSet(boolean value) {
      if (!value) {
        this.worldLocation = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WORLD_LOCATION:
        if (value == null) {
          unsetWorldLocation();
        } else {
          setWorldLocation((Location)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WORLD_LOCATION:
        return getWorldLocation();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WORLD_LOCATION:
        return isSetWorldLocation();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateSpark_args)
        return this.equals((CreateSpark_args)that);
      return false;
    }

    public boolean equals(CreateSpark_args that) {
      if (that == null)
        return false;

      boolean this_present_worldLocation = true && this.isSetWorldLocation();
      boolean that_present_worldLocation = true && that.isSetWorldLocation();
      if (this_present_worldLocation || that_present_worldLocation) {
        if (!(this_present_worldLocation && that_present_worldLocation))
          return false;
        if (!this.worldLocation.equals(that.worldLocation))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(CreateSpark_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWorldLocation()).compareTo(other.isSetWorldLocation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorldLocation()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.worldLocation, other.worldLocation);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateSpark_args(");
      boolean first = true;

      sb.append("worldLocation:");
      if (this.worldLocation == null) {
        sb.append("null");
      } else {
        sb.append(this.worldLocation);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (worldLocation != null) {
        worldLocation.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateSpark_argsStandardSchemeFactory implements SchemeFactory {
      public CreateSpark_argsStandardScheme getScheme() {
        return new CreateSpark_argsStandardScheme();
      }
    }

    private static class CreateSpark_argsStandardScheme extends StandardScheme<CreateSpark_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateSpark_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WORLD_LOCATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.worldLocation = new Location();
                struct.worldLocation.read(iprot);
                struct.setWorldLocationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateSpark_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.worldLocation != null) {
          oprot.writeFieldBegin(WORLD_LOCATION_FIELD_DESC);
          struct.worldLocation.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateSpark_argsTupleSchemeFactory implements SchemeFactory {
      public CreateSpark_argsTupleScheme getScheme() {
        return new CreateSpark_argsTupleScheme();
      }
    }

    private static class CreateSpark_argsTupleScheme extends TupleScheme<CreateSpark_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateSpark_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWorldLocation()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWorldLocation()) {
          struct.worldLocation.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateSpark_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.worldLocation = new Location();
          struct.worldLocation.read(iprot);
          struct.setWorldLocationIsSet(true);
        }
      }
    }

  }

  public static class CreateSpark_result implements org.apache.thrift.TBase<CreateSpark_result, CreateSpark_result._Fields>, java.io.Serializable, Cloneable, Comparable<CreateSpark_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateSpark_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateSpark_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateSpark_resultTupleSchemeFactory());
    }

    public Spark success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Spark.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateSpark_result.class, metaDataMap);
    }

    public CreateSpark_result() {
    }

    public CreateSpark_result(
      Spark success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateSpark_result(CreateSpark_result other) {
      if (other.isSetSuccess()) {
        this.success = new Spark(other.success);
      }
    }

    public CreateSpark_result deepCopy() {
      return new CreateSpark_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Spark getSuccess() {
      return this.success;
    }

    public CreateSpark_result setSuccess(Spark success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Spark)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateSpark_result)
        return this.equals((CreateSpark_result)that);
      return false;
    }

    public boolean equals(CreateSpark_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(CreateSpark_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateSpark_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateSpark_resultStandardSchemeFactory implements SchemeFactory {
      public CreateSpark_resultStandardScheme getScheme() {
        return new CreateSpark_resultStandardScheme();
      }
    }

    private static class CreateSpark_resultStandardScheme extends StandardScheme<CreateSpark_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateSpark_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Spark();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateSpark_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateSpark_resultTupleSchemeFactory implements SchemeFactory {
      public CreateSpark_resultTupleScheme getScheme() {
        return new CreateSpark_resultTupleScheme();
      }
    }

    private static class CreateSpark_resultTupleScheme extends TupleScheme<CreateSpark_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateSpark_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateSpark_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Spark();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetAllSparks_args implements org.apache.thrift.TBase<GetAllSparks_args, GetAllSparks_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetAllSparks_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAllSparks_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAllSparks_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAllSparks_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAllSparks_args.class, metaDataMap);
    }

    public GetAllSparks_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAllSparks_args(GetAllSparks_args other) {
    }

    public GetAllSparks_args deepCopy() {
      return new GetAllSparks_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAllSparks_args)
        return this.equals((GetAllSparks_args)that);
      return false;
    }

    public boolean equals(GetAllSparks_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(GetAllSparks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAllSparks_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAllSparks_argsStandardSchemeFactory implements SchemeFactory {
      public GetAllSparks_argsStandardScheme getScheme() {
        return new GetAllSparks_argsStandardScheme();
      }
    }

    private static class GetAllSparks_argsStandardScheme extends StandardScheme<GetAllSparks_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAllSparks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAllSparks_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAllSparks_argsTupleSchemeFactory implements SchemeFactory {
      public GetAllSparks_argsTupleScheme getScheme() {
        return new GetAllSparks_argsTupleScheme();
      }
    }

    private static class GetAllSparks_argsTupleScheme extends TupleScheme<GetAllSparks_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAllSparks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAllSparks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetAllSparks_result implements org.apache.thrift.TBase<GetAllSparks_result, GetAllSparks_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetAllSparks_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAllSparks_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAllSparks_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAllSparks_resultTupleSchemeFactory());
    }

    public List<Spark> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Spark.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAllSparks_result.class, metaDataMap);
    }

    public GetAllSparks_result() {
    }

    public GetAllSparks_result(
      List<Spark> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAllSparks_result(GetAllSparks_result other) {
      if (other.isSetSuccess()) {
        List<Spark> __this__success = new ArrayList<Spark>(other.success.size());
        for (Spark other_element : other.success) {
          __this__success.add(new Spark(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetAllSparks_result deepCopy() {
      return new GetAllSparks_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Spark> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Spark elem) {
      if (this.success == null) {
        this.success = new ArrayList<Spark>();
      }
      this.success.add(elem);
    }

    public List<Spark> getSuccess() {
      return this.success;
    }

    public GetAllSparks_result setSuccess(List<Spark> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Spark>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAllSparks_result)
        return this.equals((GetAllSparks_result)that);
      return false;
    }

    public boolean equals(GetAllSparks_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(GetAllSparks_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAllSparks_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAllSparks_resultStandardSchemeFactory implements SchemeFactory {
      public GetAllSparks_resultStandardScheme getScheme() {
        return new GetAllSparks_resultStandardScheme();
      }
    }

    private static class GetAllSparks_resultStandardScheme extends StandardScheme<GetAllSparks_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAllSparks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<Spark>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    Spark _elem2;
                    _elem2 = new Spark();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAllSparks_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Spark _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAllSparks_resultTupleSchemeFactory implements SchemeFactory {
      public GetAllSparks_resultTupleScheme getScheme() {
        return new GetAllSparks_resultTupleScheme();
      }
    }

    private static class GetAllSparks_resultTupleScheme extends TupleScheme<GetAllSparks_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAllSparks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Spark _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAllSparks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Spark>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              Spark _elem7;
              _elem7 = new Spark();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class RemoveSpark_args implements org.apache.thrift.TBase<RemoveSpark_args, RemoveSpark_args._Fields>, java.io.Serializable, Cloneable, Comparable<RemoveSpark_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoveSpark_args");

    private static final org.apache.thrift.protocol.TField SPARK_TO_REMOVE_FIELD_DESC = new org.apache.thrift.protocol.TField("sparkToRemove", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RemoveSpark_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RemoveSpark_argsTupleSchemeFactory());
    }

    public Spark sparkToRemove; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPARK_TO_REMOVE((short)1, "sparkToRemove");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPARK_TO_REMOVE
            return SPARK_TO_REMOVE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPARK_TO_REMOVE, new org.apache.thrift.meta_data.FieldMetaData("sparkToRemove", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Spark.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoveSpark_args.class, metaDataMap);
    }

    public RemoveSpark_args() {
    }

    public RemoveSpark_args(
      Spark sparkToRemove)
    {
      this();
      this.sparkToRemove = sparkToRemove;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RemoveSpark_args(RemoveSpark_args other) {
      if (other.isSetSparkToRemove()) {
        this.sparkToRemove = new Spark(other.sparkToRemove);
      }
    }

    public RemoveSpark_args deepCopy() {
      return new RemoveSpark_args(this);
    }

    @Override
    public void clear() {
      this.sparkToRemove = null;
    }

    public Spark getSparkToRemove() {
      return this.sparkToRemove;
    }

    public RemoveSpark_args setSparkToRemove(Spark sparkToRemove) {
      this.sparkToRemove = sparkToRemove;
      return this;
    }

    public void unsetSparkToRemove() {
      this.sparkToRemove = null;
    }

    /** Returns true if field sparkToRemove is set (has been assigned a value) and false otherwise */
    public boolean isSetSparkToRemove() {
      return this.sparkToRemove != null;
    }

    public void setSparkToRemoveIsSet(boolean value) {
      if (!value) {
        this.sparkToRemove = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SPARK_TO_REMOVE:
        if (value == null) {
          unsetSparkToRemove();
        } else {
          setSparkToRemove((Spark)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SPARK_TO_REMOVE:
        return getSparkToRemove();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SPARK_TO_REMOVE:
        return isSetSparkToRemove();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RemoveSpark_args)
        return this.equals((RemoveSpark_args)that);
      return false;
    }

    public boolean equals(RemoveSpark_args that) {
      if (that == null)
        return false;

      boolean this_present_sparkToRemove = true && this.isSetSparkToRemove();
      boolean that_present_sparkToRemove = true && that.isSetSparkToRemove();
      if (this_present_sparkToRemove || that_present_sparkToRemove) {
        if (!(this_present_sparkToRemove && that_present_sparkToRemove))
          return false;
        if (!this.sparkToRemove.equals(that.sparkToRemove))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(RemoveSpark_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSparkToRemove()).compareTo(other.isSetSparkToRemove());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSparkToRemove()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sparkToRemove, other.sparkToRemove);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RemoveSpark_args(");
      boolean first = true;

      sb.append("sparkToRemove:");
      if (this.sparkToRemove == null) {
        sb.append("null");
      } else {
        sb.append(this.sparkToRemove);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sparkToRemove != null) {
        sparkToRemove.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RemoveSpark_argsStandardSchemeFactory implements SchemeFactory {
      public RemoveSpark_argsStandardScheme getScheme() {
        return new RemoveSpark_argsStandardScheme();
      }
    }

    private static class RemoveSpark_argsStandardScheme extends StandardScheme<RemoveSpark_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RemoveSpark_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SPARK_TO_REMOVE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sparkToRemove = new Spark();
                struct.sparkToRemove.read(iprot);
                struct.setSparkToRemoveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RemoveSpark_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sparkToRemove != null) {
          oprot.writeFieldBegin(SPARK_TO_REMOVE_FIELD_DESC);
          struct.sparkToRemove.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RemoveSpark_argsTupleSchemeFactory implements SchemeFactory {
      public RemoveSpark_argsTupleScheme getScheme() {
        return new RemoveSpark_argsTupleScheme();
      }
    }

    private static class RemoveSpark_argsTupleScheme extends TupleScheme<RemoveSpark_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RemoveSpark_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSparkToRemove()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSparkToRemove()) {
          struct.sparkToRemove.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RemoveSpark_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sparkToRemove = new Spark();
          struct.sparkToRemove.read(iprot);
          struct.setSparkToRemoveIsSet(true);
        }
      }
    }

  }

  public static class RemoveSpark_result implements org.apache.thrift.TBase<RemoveSpark_result, RemoveSpark_result._Fields>, java.io.Serializable, Cloneable, Comparable<RemoveSpark_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoveSpark_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RemoveSpark_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RemoveSpark_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoveSpark_result.class, metaDataMap);
    }

    public RemoveSpark_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RemoveSpark_result(RemoveSpark_result other) {
    }

    public RemoveSpark_result deepCopy() {
      return new RemoveSpark_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RemoveSpark_result)
        return this.equals((RemoveSpark_result)that);
      return false;
    }

    public boolean equals(RemoveSpark_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(RemoveSpark_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RemoveSpark_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RemoveSpark_resultStandardSchemeFactory implements SchemeFactory {
      public RemoveSpark_resultStandardScheme getScheme() {
        return new RemoveSpark_resultStandardScheme();
      }
    }

    private static class RemoveSpark_resultStandardScheme extends StandardScheme<RemoveSpark_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RemoveSpark_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RemoveSpark_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RemoveSpark_resultTupleSchemeFactory implements SchemeFactory {
      public RemoveSpark_resultTupleScheme getScheme() {
        return new RemoveSpark_resultTupleScheme();
      }
    }

    private static class RemoveSpark_resultTupleScheme extends TupleScheme<RemoveSpark_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RemoveSpark_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RemoveSpark_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class RemoveAllSparks_args implements org.apache.thrift.TBase<RemoveAllSparks_args, RemoveAllSparks_args._Fields>, java.io.Serializable, Cloneable, Comparable<RemoveAllSparks_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoveAllSparks_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RemoveAllSparks_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RemoveAllSparks_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoveAllSparks_args.class, metaDataMap);
    }

    public RemoveAllSparks_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RemoveAllSparks_args(RemoveAllSparks_args other) {
    }

    public RemoveAllSparks_args deepCopy() {
      return new RemoveAllSparks_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RemoveAllSparks_args)
        return this.equals((RemoveAllSparks_args)that);
      return false;
    }

    public boolean equals(RemoveAllSparks_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(RemoveAllSparks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RemoveAllSparks_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RemoveAllSparks_argsStandardSchemeFactory implements SchemeFactory {
      public RemoveAllSparks_argsStandardScheme getScheme() {
        return new RemoveAllSparks_argsStandardScheme();
      }
    }

    private static class RemoveAllSparks_argsStandardScheme extends StandardScheme<RemoveAllSparks_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RemoveAllSparks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RemoveAllSparks_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RemoveAllSparks_argsTupleSchemeFactory implements SchemeFactory {
      public RemoveAllSparks_argsTupleScheme getScheme() {
        return new RemoveAllSparks_argsTupleScheme();
      }
    }

    private static class RemoveAllSparks_argsTupleScheme extends TupleScheme<RemoveAllSparks_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RemoveAllSparks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RemoveAllSparks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class RemoveAllSparks_result implements org.apache.thrift.TBase<RemoveAllSparks_result, RemoveAllSparks_result._Fields>, java.io.Serializable, Cloneable, Comparable<RemoveAllSparks_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoveAllSparks_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RemoveAllSparks_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RemoveAllSparks_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoveAllSparks_result.class, metaDataMap);
    }

    public RemoveAllSparks_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RemoveAllSparks_result(RemoveAllSparks_result other) {
    }

    public RemoveAllSparks_result deepCopy() {
      return new RemoveAllSparks_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RemoveAllSparks_result)
        return this.equals((RemoveAllSparks_result)that);
      return false;
    }

    public boolean equals(RemoveAllSparks_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(RemoveAllSparks_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RemoveAllSparks_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RemoveAllSparks_resultStandardSchemeFactory implements SchemeFactory {
      public RemoveAllSparks_resultStandardScheme getScheme() {
        return new RemoveAllSparks_resultStandardScheme();
      }
    }

    private static class RemoveAllSparks_resultStandardScheme extends StandardScheme<RemoveAllSparks_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RemoveAllSparks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RemoveAllSparks_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RemoveAllSparks_resultTupleSchemeFactory implements SchemeFactory {
      public RemoveAllSparks_resultTupleScheme getScheme() {
        return new RemoveAllSparks_resultTupleScheme();
      }
    }

    private static class RemoveAllSparks_resultTupleScheme extends TupleScheme<RemoveAllSparks_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RemoveAllSparks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RemoveAllSparks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class DispatchMovementCommand_args implements org.apache.thrift.TBase<DispatchMovementCommand_args, DispatchMovementCommand_args._Fields>, java.io.Serializable, Cloneable, Comparable<DispatchMovementCommand_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DispatchMovementCommand_args");

    private static final org.apache.thrift.protocol.TField SPARK_FIELD_DESC = new org.apache.thrift.protocol.TField("spark", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MOVEMENT_COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("movementCommand", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DispatchMovementCommand_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DispatchMovementCommand_argsTupleSchemeFactory());
    }

    public Spark spark; // required
    /**
     * 
     * @see MovementTypes
     */
    public MovementTypes movementCommand; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPARK((short)1, "spark"),
      /**
       * 
       * @see MovementTypes
       */
      MOVEMENT_COMMAND((short)2, "movementCommand");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPARK
            return SPARK;
          case 2: // MOVEMENT_COMMAND
            return MOVEMENT_COMMAND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPARK, new org.apache.thrift.meta_data.FieldMetaData("spark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Spark.class)));
      tmpMap.put(_Fields.MOVEMENT_COMMAND, new org.apache.thrift.meta_data.FieldMetaData("movementCommand", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MovementTypes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DispatchMovementCommand_args.class, metaDataMap);
    }

    public DispatchMovementCommand_args() {
    }

    public DispatchMovementCommand_args(
      Spark spark,
      MovementTypes movementCommand)
    {
      this();
      this.spark = spark;
      this.movementCommand = movementCommand;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DispatchMovementCommand_args(DispatchMovementCommand_args other) {
      if (other.isSetSpark()) {
        this.spark = new Spark(other.spark);
      }
      if (other.isSetMovementCommand()) {
        this.movementCommand = other.movementCommand;
      }
    }

    public DispatchMovementCommand_args deepCopy() {
      return new DispatchMovementCommand_args(this);
    }

    @Override
    public void clear() {
      this.spark = null;
      this.movementCommand = null;
    }

    public Spark getSpark() {
      return this.spark;
    }

    public DispatchMovementCommand_args setSpark(Spark spark) {
      this.spark = spark;
      return this;
    }

    public void unsetSpark() {
      this.spark = null;
    }

    /** Returns true if field spark is set (has been assigned a value) and false otherwise */
    public boolean isSetSpark() {
      return this.spark != null;
    }

    public void setSparkIsSet(boolean value) {
      if (!value) {
        this.spark = null;
      }
    }

    /**
     * 
     * @see MovementTypes
     */
    public MovementTypes getMovementCommand() {
      return this.movementCommand;
    }

    /**
     * 
     * @see MovementTypes
     */
    public DispatchMovementCommand_args setMovementCommand(MovementTypes movementCommand) {
      this.movementCommand = movementCommand;
      return this;
    }

    public void unsetMovementCommand() {
      this.movementCommand = null;
    }

    /** Returns true if field movementCommand is set (has been assigned a value) and false otherwise */
    public boolean isSetMovementCommand() {
      return this.movementCommand != null;
    }

    public void setMovementCommandIsSet(boolean value) {
      if (!value) {
        this.movementCommand = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SPARK:
        if (value == null) {
          unsetSpark();
        } else {
          setSpark((Spark)value);
        }
        break;

      case MOVEMENT_COMMAND:
        if (value == null) {
          unsetMovementCommand();
        } else {
          setMovementCommand((MovementTypes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SPARK:
        return getSpark();

      case MOVEMENT_COMMAND:
        return getMovementCommand();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SPARK:
        return isSetSpark();
      case MOVEMENT_COMMAND:
        return isSetMovementCommand();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DispatchMovementCommand_args)
        return this.equals((DispatchMovementCommand_args)that);
      return false;
    }

    public boolean equals(DispatchMovementCommand_args that) {
      if (that == null)
        return false;

      boolean this_present_spark = true && this.isSetSpark();
      boolean that_present_spark = true && that.isSetSpark();
      if (this_present_spark || that_present_spark) {
        if (!(this_present_spark && that_present_spark))
          return false;
        if (!this.spark.equals(that.spark))
          return false;
      }

      boolean this_present_movementCommand = true && this.isSetMovementCommand();
      boolean that_present_movementCommand = true && that.isSetMovementCommand();
      if (this_present_movementCommand || that_present_movementCommand) {
        if (!(this_present_movementCommand && that_present_movementCommand))
          return false;
        if (!this.movementCommand.equals(that.movementCommand))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(DispatchMovementCommand_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSpark()).compareTo(other.isSetSpark());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpark()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spark, other.spark);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMovementCommand()).compareTo(other.isSetMovementCommand());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMovementCommand()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.movementCommand, other.movementCommand);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DispatchMovementCommand_args(");
      boolean first = true;

      sb.append("spark:");
      if (this.spark == null) {
        sb.append("null");
      } else {
        sb.append(this.spark);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("movementCommand:");
      if (this.movementCommand == null) {
        sb.append("null");
      } else {
        sb.append(this.movementCommand);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (spark != null) {
        spark.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DispatchMovementCommand_argsStandardSchemeFactory implements SchemeFactory {
      public DispatchMovementCommand_argsStandardScheme getScheme() {
        return new DispatchMovementCommand_argsStandardScheme();
      }
    }

    private static class DispatchMovementCommand_argsStandardScheme extends StandardScheme<DispatchMovementCommand_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DispatchMovementCommand_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SPARK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.spark = new Spark();
                struct.spark.read(iprot);
                struct.setSparkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MOVEMENT_COMMAND
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.movementCommand = MovementTypes.findByValue(iprot.readI32());
                struct.setMovementCommandIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DispatchMovementCommand_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.spark != null) {
          oprot.writeFieldBegin(SPARK_FIELD_DESC);
          struct.spark.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.movementCommand != null) {
          oprot.writeFieldBegin(MOVEMENT_COMMAND_FIELD_DESC);
          oprot.writeI32(struct.movementCommand.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DispatchMovementCommand_argsTupleSchemeFactory implements SchemeFactory {
      public DispatchMovementCommand_argsTupleScheme getScheme() {
        return new DispatchMovementCommand_argsTupleScheme();
      }
    }

    private static class DispatchMovementCommand_argsTupleScheme extends TupleScheme<DispatchMovementCommand_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DispatchMovementCommand_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSpark()) {
          optionals.set(0);
        }
        if (struct.isSetMovementCommand()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSpark()) {
          struct.spark.write(oprot);
        }
        if (struct.isSetMovementCommand()) {
          oprot.writeI32(struct.movementCommand.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DispatchMovementCommand_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.spark = new Spark();
          struct.spark.read(iprot);
          struct.setSparkIsSet(true);
        }
        if (incoming.get(1)) {
          struct.movementCommand = MovementTypes.findByValue(iprot.readI32());
          struct.setMovementCommandIsSet(true);
        }
      }
    }

  }

  public static class DispatchMovementCommand_result implements org.apache.thrift.TBase<DispatchMovementCommand_result, DispatchMovementCommand_result._Fields>, java.io.Serializable, Cloneable, Comparable<DispatchMovementCommand_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DispatchMovementCommand_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DispatchMovementCommand_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DispatchMovementCommand_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DispatchMovementCommand_result.class, metaDataMap);
    }

    public DispatchMovementCommand_result() {
    }

    public DispatchMovementCommand_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DispatchMovementCommand_result(DispatchMovementCommand_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public DispatchMovementCommand_result deepCopy() {
      return new DispatchMovementCommand_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public DispatchMovementCommand_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DispatchMovementCommand_result)
        return this.equals((DispatchMovementCommand_result)that);
      return false;
    }

    public boolean equals(DispatchMovementCommand_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(DispatchMovementCommand_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DispatchMovementCommand_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DispatchMovementCommand_resultStandardSchemeFactory implements SchemeFactory {
      public DispatchMovementCommand_resultStandardScheme getScheme() {
        return new DispatchMovementCommand_resultStandardScheme();
      }
    }

    private static class DispatchMovementCommand_resultStandardScheme extends StandardScheme<DispatchMovementCommand_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DispatchMovementCommand_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DispatchMovementCommand_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DispatchMovementCommand_resultTupleSchemeFactory implements SchemeFactory {
      public DispatchMovementCommand_resultTupleScheme getScheme() {
        return new DispatchMovementCommand_resultTupleScheme();
      }
    }

    private static class DispatchMovementCommand_resultTupleScheme extends TupleScheme<DispatchMovementCommand_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DispatchMovementCommand_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DispatchMovementCommand_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class DispatchOrientationCommand_args implements org.apache.thrift.TBase<DispatchOrientationCommand_args, DispatchOrientationCommand_args._Fields>, java.io.Serializable, Cloneable, Comparable<DispatchOrientationCommand_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DispatchOrientationCommand_args");

    private static final org.apache.thrift.protocol.TField SPARK_FIELD_DESC = new org.apache.thrift.protocol.TField("spark", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ORIENTATION_COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("orientationCommand", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DispatchOrientationCommand_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DispatchOrientationCommand_argsTupleSchemeFactory());
    }

    public Spark spark; // required
    /**
     * 
     * @see OrientationTypes
     */
    public OrientationTypes orientationCommand; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPARK((short)1, "spark"),
      /**
       * 
       * @see OrientationTypes
       */
      ORIENTATION_COMMAND((short)2, "orientationCommand");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPARK
            return SPARK;
          case 2: // ORIENTATION_COMMAND
            return ORIENTATION_COMMAND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPARK, new org.apache.thrift.meta_data.FieldMetaData("spark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Spark.class)));
      tmpMap.put(_Fields.ORIENTATION_COMMAND, new org.apache.thrift.meta_data.FieldMetaData("orientationCommand", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OrientationTypes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DispatchOrientationCommand_args.class, metaDataMap);
    }

    public DispatchOrientationCommand_args() {
    }

    public DispatchOrientationCommand_args(
      Spark spark,
      OrientationTypes orientationCommand)
    {
      this();
      this.spark = spark;
      this.orientationCommand = orientationCommand;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DispatchOrientationCommand_args(DispatchOrientationCommand_args other) {
      if (other.isSetSpark()) {
        this.spark = new Spark(other.spark);
      }
      if (other.isSetOrientationCommand()) {
        this.orientationCommand = other.orientationCommand;
      }
    }

    public DispatchOrientationCommand_args deepCopy() {
      return new DispatchOrientationCommand_args(this);
    }

    @Override
    public void clear() {
      this.spark = null;
      this.orientationCommand = null;
    }

    public Spark getSpark() {
      return this.spark;
    }

    public DispatchOrientationCommand_args setSpark(Spark spark) {
      this.spark = spark;
      return this;
    }

    public void unsetSpark() {
      this.spark = null;
    }

    /** Returns true if field spark is set (has been assigned a value) and false otherwise */
    public boolean isSetSpark() {
      return this.spark != null;
    }

    public void setSparkIsSet(boolean value) {
      if (!value) {
        this.spark = null;
      }
    }

    /**
     * 
     * @see OrientationTypes
     */
    public OrientationTypes getOrientationCommand() {
      return this.orientationCommand;
    }

    /**
     * 
     * @see OrientationTypes
     */
    public DispatchOrientationCommand_args setOrientationCommand(OrientationTypes orientationCommand) {
      this.orientationCommand = orientationCommand;
      return this;
    }

    public void unsetOrientationCommand() {
      this.orientationCommand = null;
    }

    /** Returns true if field orientationCommand is set (has been assigned a value) and false otherwise */
    public boolean isSetOrientationCommand() {
      return this.orientationCommand != null;
    }

    public void setOrientationCommandIsSet(boolean value) {
      if (!value) {
        this.orientationCommand = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SPARK:
        if (value == null) {
          unsetSpark();
        } else {
          setSpark((Spark)value);
        }
        break;

      case ORIENTATION_COMMAND:
        if (value == null) {
          unsetOrientationCommand();
        } else {
          setOrientationCommand((OrientationTypes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SPARK:
        return getSpark();

      case ORIENTATION_COMMAND:
        return getOrientationCommand();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SPARK:
        return isSetSpark();
      case ORIENTATION_COMMAND:
        return isSetOrientationCommand();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DispatchOrientationCommand_args)
        return this.equals((DispatchOrientationCommand_args)that);
      return false;
    }

    public boolean equals(DispatchOrientationCommand_args that) {
      if (that == null)
        return false;

      boolean this_present_spark = true && this.isSetSpark();
      boolean that_present_spark = true && that.isSetSpark();
      if (this_present_spark || that_present_spark) {
        if (!(this_present_spark && that_present_spark))
          return false;
        if (!this.spark.equals(that.spark))
          return false;
      }

      boolean this_present_orientationCommand = true && this.isSetOrientationCommand();
      boolean that_present_orientationCommand = true && that.isSetOrientationCommand();
      if (this_present_orientationCommand || that_present_orientationCommand) {
        if (!(this_present_orientationCommand && that_present_orientationCommand))
          return false;
        if (!this.orientationCommand.equals(that.orientationCommand))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(DispatchOrientationCommand_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSpark()).compareTo(other.isSetSpark());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpark()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spark, other.spark);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrientationCommand()).compareTo(other.isSetOrientationCommand());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrientationCommand()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orientationCommand, other.orientationCommand);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DispatchOrientationCommand_args(");
      boolean first = true;

      sb.append("spark:");
      if (this.spark == null) {
        sb.append("null");
      } else {
        sb.append(this.spark);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orientationCommand:");
      if (this.orientationCommand == null) {
        sb.append("null");
      } else {
        sb.append(this.orientationCommand);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (spark != null) {
        spark.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DispatchOrientationCommand_argsStandardSchemeFactory implements SchemeFactory {
      public DispatchOrientationCommand_argsStandardScheme getScheme() {
        return new DispatchOrientationCommand_argsStandardScheme();
      }
    }

    private static class DispatchOrientationCommand_argsStandardScheme extends StandardScheme<DispatchOrientationCommand_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DispatchOrientationCommand_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SPARK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.spark = new Spark();
                struct.spark.read(iprot);
                struct.setSparkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORIENTATION_COMMAND
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.orientationCommand = OrientationTypes.findByValue(iprot.readI32());
                struct.setOrientationCommandIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DispatchOrientationCommand_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.spark != null) {
          oprot.writeFieldBegin(SPARK_FIELD_DESC);
          struct.spark.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.orientationCommand != null) {
          oprot.writeFieldBegin(ORIENTATION_COMMAND_FIELD_DESC);
          oprot.writeI32(struct.orientationCommand.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DispatchOrientationCommand_argsTupleSchemeFactory implements SchemeFactory {
      public DispatchOrientationCommand_argsTupleScheme getScheme() {
        return new DispatchOrientationCommand_argsTupleScheme();
      }
    }

    private static class DispatchOrientationCommand_argsTupleScheme extends TupleScheme<DispatchOrientationCommand_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DispatchOrientationCommand_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSpark()) {
          optionals.set(0);
        }
        if (struct.isSetOrientationCommand()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSpark()) {
          struct.spark.write(oprot);
        }
        if (struct.isSetOrientationCommand()) {
          oprot.writeI32(struct.orientationCommand.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DispatchOrientationCommand_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.spark = new Spark();
          struct.spark.read(iprot);
          struct.setSparkIsSet(true);
        }
        if (incoming.get(1)) {
          struct.orientationCommand = OrientationTypes.findByValue(iprot.readI32());
          struct.setOrientationCommandIsSet(true);
        }
      }
    }

  }

  public static class DispatchOrientationCommand_result implements org.apache.thrift.TBase<DispatchOrientationCommand_result, DispatchOrientationCommand_result._Fields>, java.io.Serializable, Cloneable, Comparable<DispatchOrientationCommand_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DispatchOrientationCommand_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DispatchOrientationCommand_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DispatchOrientationCommand_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DispatchOrientationCommand_result.class, metaDataMap);
    }

    public DispatchOrientationCommand_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DispatchOrientationCommand_result(DispatchOrientationCommand_result other) {
    }

    public DispatchOrientationCommand_result deepCopy() {
      return new DispatchOrientationCommand_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DispatchOrientationCommand_result)
        return this.equals((DispatchOrientationCommand_result)that);
      return false;
    }

    public boolean equals(DispatchOrientationCommand_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(DispatchOrientationCommand_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DispatchOrientationCommand_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DispatchOrientationCommand_resultStandardSchemeFactory implements SchemeFactory {
      public DispatchOrientationCommand_resultStandardScheme getScheme() {
        return new DispatchOrientationCommand_resultStandardScheme();
      }
    }

    private static class DispatchOrientationCommand_resultStandardScheme extends StandardScheme<DispatchOrientationCommand_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DispatchOrientationCommand_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DispatchOrientationCommand_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DispatchOrientationCommand_resultTupleSchemeFactory implements SchemeFactory {
      public DispatchOrientationCommand_resultTupleScheme getScheme() {
        return new DispatchOrientationCommand_resultTupleScheme();
      }
    }

    private static class DispatchOrientationCommand_resultTupleScheme extends TupleScheme<DispatchOrientationCommand_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DispatchOrientationCommand_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DispatchOrientationCommand_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
