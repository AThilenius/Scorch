AssignmentDescription.create!([
  {name: "Hello, world!", markdown: "### So you got some markdown, big woop.\nThis page was generated with much love and magic pixie dust, for a specific student and only for that student. **No Magic Fairies were harmed in the creation of this page!**\n###Here is how it works:\n- A teacher logs into **Forge** and creates an *assignment* using the **Magic Pixie-Dust Assignment Editor&copy;**. Each assignment is defined in a [Markdown] format, allowing for rich format, like the text you are *reading right now*.\n- A poor unsuspecting student logs into **Forge** and finds their fun plans for the weekend have been canceled. They navigate to this page. Magic Fairies are called in to create it for them **Our Magic-Fairies are paid a fair, livable wage**. The ~~slave labor~~ Magic Fairies do the following:\n    - **Track points in real time** earned for the overall assignment and for each level. This is displayed in the upper right of each panel and each panel changes color depending on this grade.\n    - **Generates a custom solution** for this specific level and for this specific student.\n        - This solution has a *Authentication Token* keyed to this student and this level.\n        - Invoking API calls within this solution will automatically route those calls to the correct student for the correct assignment.\n- Unsuspecting student  downloads the *Visual Studio* or *XCode* project and creates a Main function **No framework is provided with the solution!** Everything is free-form.\n- Poor unsuspecting ~~lab rat~~ *student* writes **ONLY** the following 2 lines of code:\n- <div style='color:#000000;background:#ffffff;'><html><body style='color:#000000; background:#ffffff; '><pre>\n<span style='color:#800000; font-weight:bold; '>int</span> <span style='color:#400000; '>main</span><span style='color:#808030; '>(</span><span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span> \n    <span style='color:#696969; '>// Like magic, the solution knows what assignment should be</span>\n    <span style='color:#696969; '>// loaded and what user this code belongs to.</span>\n    Level level <span style='color:#808030; '>=</span> Anvil<span style='color:#808030; '>.</span>GetLevel<span style='color:#808030; '>(</span><span style='color:#008c00; '>1</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>\n\n    <span style='color:#696969; '>// Blaze moves the spark forward one space</span>\n    level<span style='color:#808030; '>.</span>GetSpark<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span><span style='color:#808030; '>.</span>MoveForward<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>\n<span style='color:#800080; '>}</span>\n</div>\n- They click run. The **Blaze** loads the assignment tied to this solution and sets up level 1 for the student tied to this solution. The Spark moves forward one space and the students code finishes running.\n- The now overworked students tabs back to **Forge** and can see that 5 points were just awarded for the *Hello, world!* level.\n- Magic Fairies are fired for demanding a pay raise and the job is outsourced.\n", jarPath: "com.thilenius.blaze.assignment.demo.HelloWorldAssignment", dueDate: "2014-12-23 02:19:00", brief_markdown: "The *Hello, world* assignment with Anvil", open_date: "2014-12-20 18:00:00"}
])
LevelDescription.create!([
  {assignment_description_id: 1, name: "Hello, world!", levelNumber: 0, points: 5, markdown: "This is the simplest possible assignment built on the **Scorch** framework, hence the name '<a href=\"http://en.wikipedia.org/wiki/%22Hello,_world!%22_program\">*Hello, world!*</a>' - a famous first assignment in any new language. Like many Hello World assignments, this one can be completed in a single line of code:\n```\nAnvil::LoadLevel(0);\n```\n\n### Getting Started:\nWell need an IDE (Integrated Development Environment) for all **Scorch** assignments. **Scorch** currently supports *XCode* (An IDE made by Apple, for OSX) and Visual Studio 2012 Pro (An IDE made by Microsoft, for Windows). While other environments and operating systems are possible, **Scorch** will not be actively supporting them.\n\n#### XCode (OSX):\nTo install <a href=\"https://itunes.apple.com/us/app/xcode/id497799835?mt=12\">*XCode*</a>, open the Apple *App Store* on your mac, search for *XCode*, and install it. Problem solved.\n\n#### Visual Studio Professional 2012 (Window):\nAs all things Microsoft, this one is a little more involved. *XCode* is free for all Mac owners but *Visual Studio* is sold for-profit. The good news is that it's free for students!\n- Head over to <a href=\"https://www.dreamspark.com/\">DreamSpark.com</a>, Microsoft's site full of free loots for students.\n- You'll need to create an account (using a Microsoft login) and then verify you're a student by entering your CU email address and clicking a verification link in the email they send you.\n- Once you are verified, head over to the Software Catalog and download **Visual Studio Professional 2012**. *Note: Not the Visual Studio 2012 Update 4 one.* This exact version will the only one supported. If you want to use 2013 (Win 8 only) you are on your own. Please don't ask for teacher help with it.\n\n### Ugh, so boring, let's get coding!\nThe worst part of '*Hello, World!*' is getting all  the garbage set up, sorry about that. The good news is that you won't need to do it again. At the top of this page, click **Download** and grab the *XCode* project if you're on OSX and the *Visual Studio* project if you're on Windows.\n\n >**These project files are specialized JUST FOR YOU!** The project is keyed to you as a student and this specific assignment. Do not share it or use someone else's. You'll also need to download a new project for each assignment. I look forward to the first student who doesn't bother to read this part, it's going to be awkward when they realize why they have no points and failed the assignment :)\n\nOnce you download and extract the project, open it up with *Visual Studio* or *XCode*. Open up **main.cpp** and make it look like this:\n```\n#include \"Anvil.h\"\n\nusing namespace AnvilAPI;\n\nint main() {\n    Anvil::LoadLevel(0);\n}\n```\n\n### Run it!\nIn *XCode* click the play button in the upper left. In *Visual Studio* click *\"Start Debugging\"*. Refresh this web page and smile, you now have 5 points! Everything in **Scorch** is automatically graded. The assignment pages are always kept up to date, with the most up to date grade you have for it. If you refresh the assignment page and don't see points, then you don't have any points. There is no delay in grading, it's all automated.", extra_credit: 0},
  {assignment_description_id: 1, name: "Move Spark", levelNumber: 1, points: 5, markdown: "We are done with setup! Yay! This assignment adds a few things to out magical one line of code form the last assignment.\n### Loading the **Level**\n```\nAnvil::LoadLevel(0);\n```\nTo this: \n```\nLevel level = Anvil::LoadLevel(1);\n```\nWe are still instructing **Anvil** to load a **Level**, this time level **1**. We are also storing the **Level** *Object* so we can do other things with it, like accessing the **Sparks** that are spawned. The **Level** with a capitol **L** is the Object's **Type**. Don't worry too much about these terms yet. The *level* with a lowercase *l* is what we named this object. We can name it anything we like, but we must use the same name in the next few lines of code.\n\n### Getting a **Spark**\nAs you may have guessed, the next step is to get ahold of a **Spark** so we can start sending it commands. This is done like so:\n```\nSpark spark = level.GetSpark();\n```\nLike the loading of the assignment, this like gets a **Spark** and saves it as *\"spark\"* with a small **L**. We get this spark from the **Level** object (that we named *\"level\"*).\n\n### Controlling our **Spark**\nThe last step of this assignment is to move our **Spark** (that we named *spark*). This is done like so:\n```\nspark.MoveForward();\n```\nWe could also move him backward with:\n```\nspark.MoveBackward();\n```\nAs you may have guessed, a **Spark** can do more than just move forward. The beautiful thing about an IDE is that it knows what things a **Spark** can and can't do. At the end of you *main* function type \"spark\" then hit the \".\" key. Both *XCode* and *Visual Studio* will pop open a list of things that can be done with the **Spark**.", extra_credit: 0},
  {assignment_description_id: 1, name: "Turn Spark", levelNumber: 2, points: 5, markdown: "This is the easiest level of all! Simply replace\n```\nspark.MoveForward();\n```\nWith one of the following two lines:\n```\nspark.TurnLeft();\n```\n```\nspark.TurnRight();\n```", extra_credit: 0},
  {assignment_description_id: 1, name: "Extra Credit: Every Move", levelNumber: 3, points: 0, markdown: "This is an extra credit assignment worth **5** points. Use what you have learned to make your **Spark** run the maze. Load the **Level** to see what the maze looks like.", extra_credit: 5}
])
MinecraftAccount.create!([
  {username: "deathsshado0", password: "qwe123qwe!#", state: "allocated", allocated_user_id: 1, access_token: "651055b56557481391f6f4b13245c99d", uuid: "a84c72ce2e9445e4b220914678f2cb6d", user_type: "legacy"},
  {username: "valordrone", password: "qwe123", state: "free", allocated_user_id: -1, access_token: "993cd74aa3de452db80c9f808a315faa", uuid: "5805718c44be4e6bbed3b95e106f4ae6", user_type: "legacy"}
])
User.create!([
  {firstName: "Alec", lastName: "Thilenius", studentID: "101492899", password: "qwe123", permissions: "super", username: "alth3531", arenaLocation: "0, 200, 0", guid: "8ef5aba1-cfac-4886-9b8d-9de30b1d9ab4"},
  {firstName: "John", lastName: "Doe", studentID: "000000001", password: "123456", permissions: "student", username: "jodo0001", arenaLocation: "32, 10, 0", guid: "32186e87-f509-4533-9716-3bda8871d261"},
  {firstName: "Elizabeth", lastName: "White", studentID: "100000000", password: "123456", permissions: "teacher", username: "elwh0001", arenaLocation: "64, 10, 0", guid: "97bdfc46-faae-480e-be91-402a1476ecdb"}
])
UserAssignment.create!([
  {user_id: 1, assignment_description_id: 1, authToken: "c0dba92c-6449-40a6-95da-11d2b7d28ad6"},
  {user_id: 3, assignment_description_id: 1, authToken: "fe5a425f-eb2d-4e54-82c5-7d9240190a3e"}
])
UserLevel.create!([
  {user_assignment_id: 1, level_description_id: 1, points: 5, extra_credit: 0},
  {user_assignment_id: 1, level_description_id: 2, points: 5, extra_credit: 0},
  {user_assignment_id: 1, level_description_id: 3, points: 0, extra_credit: 0},
  {user_assignment_id: 1, level_description_id: 4, points: 0, extra_credit: 0},
  {user_assignment_id: 2, level_description_id: 1, points: 0, extra_credit: 0},
  {user_assignment_id: 2, level_description_id: 2, points: 0, extra_credit: 0},
  {user_assignment_id: 2, level_description_id: 3, points: 0, extra_credit: 0},
  {user_assignment_id: 2, level_description_id: 4, points: 0, extra_credit: 0}
])
