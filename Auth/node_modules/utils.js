exports.error = function(message, errorCode, stackTrace) {
  return {
    did_pass : false,
    failure_message : message,
    error_code : errorCode,
    stack_trace : stackTrace 
  };
};

/*
 * Accepts a varadic list of fields that need to be checked. Nested fields can
 * be checked using a : delimited. For example "message:target_email"
 */
exports.fieldCheck = function(req, res) {
  var didPass = true;
  var missingFields = "The field(s) ";
  for (var i = 2; i < arguments.length; i++) {
    var argumentParts = arguments[i].split(":").reverse();
    var cursor = req.body;
    while (argumentParts.length !== 0) {
      var arg = argumentParts.pop(); 
      if (!cursor.hasOwnProperty(arg)) {
        missingFields += "[" + arguments[i] + "] ";
        didPass = false;
        break;
      }
      cursor = cursor[arg];
    }
  }
  if (!didPass) {
    res.json(module.exports.error(missingFields +
          "is required but not provided.", 400));
  }
  return didPass;
};

exports.errorCheck = function(res, err) {
  if (err === null) {
    return false;
  } else {
    res.json(module.exports.error("Internal Server Error: " + err, 500, null));
    return true;
  }
};

exports.PLevels = {
  PSuper: 5,
  PAdmin: 4, 
  PUser: 3,
  PSecondary : 2,
  PUnvalidated: 1
};

// Checks the req.body for a valid authentication token. successHandler is
// called with the argument (permission_level, message_json, [optional] user)
exports.authenticateStdAuth = function (req, res, successHandler) {
  if (!module.exports.fieldCheck(req, res, "message:target_email_address")) {
    return;
  }
  // Check if it's an internal request
  if (req.body.hasOwnProperty("internal_req")) {
    successHandler(module.exports.PSuer, res.body.message);
    return;
  }
  // External request, check existence of token
  if (!module.exports.fieldCheck(req, res, "token")) {
    return;
  }
  var tokensDb = req.db.collection("tokens");
  var usersDb = req.db.collection("users");
  tokensDb.find({ token: req.body.token }).toArray(function (t_err, t_items) {
    if (module.exports.errorCheck(res, t_err)) { return; }
    if (t_items.length === 0) {
      res.json(module.exports.error("Invalid token.", 403, null));
      return;
    } else {
      // Valid token, find the user.
      // TODO: Use ID, not email address.
      usersDb.find({ email_address : t_items[0].email_address })
        .toArray(function (u_err, u_items) {
          if (module.exports.errorCheck(res, u_err)) { return; }
          if (u_items.length === 0) {
            res.json(module.exports.error("Invalid token.", 403, null));
            return;
          } else {
            // Valid user account, can finally pass it off
            successHandler(t_items[0].permissions, req.body.message,
                u_items[0]);
          }
        });
    }
  });
};
