/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Flame
{
  public partial class FlameService {
    public interface Iface {
      Spark CreateSpark(Location worldLocation);
      #if SILVERLIGHT
      IAsyncResult Begin_CreateSpark(AsyncCallback callback, object state, Location worldLocation);
      Spark End_CreateSpark(IAsyncResult asyncResult);
      #endif
      List<Spark> GetAllSparks();
      #if SILVERLIGHT
      IAsyncResult Begin_GetAllSparks(AsyncCallback callback, object state);
      List<Spark> End_GetAllSparks(IAsyncResult asyncResult);
      #endif
      void RemoveSpark(Spark sparkToRemove);
      #if SILVERLIGHT
      IAsyncResult Begin_RemoveSpark(AsyncCallback callback, object state, Spark sparkToRemove);
      void End_RemoveSpark(IAsyncResult asyncResult);
      #endif
      void RemoveAllSparks();
      #if SILVERLIGHT
      IAsyncResult Begin_RemoveAllSparks(AsyncCallback callback, object state);
      void End_RemoveAllSparks(IAsyncResult asyncResult);
      #endif
      bool DispatchMovementCommand(Spark spark, MovementTypes movementCommand);
      #if SILVERLIGHT
      IAsyncResult Begin_DispatchMovementCommand(AsyncCallback callback, object state, Spark spark, MovementTypes movementCommand);
      bool End_DispatchMovementCommand(IAsyncResult asyncResult);
      #endif
      void DispatchOrientationCommand(Spark spark, OrientationTypes orientationCommand);
      #if SILVERLIGHT
      IAsyncResult Begin_DispatchOrientationCommand(AsyncCallback callback, object state, Spark spark, OrientationTypes orientationCommand);
      void End_DispatchOrientationCommand(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_CreateSpark(AsyncCallback callback, object state, Location worldLocation)
      {
        return send_CreateSpark(callback, state, worldLocation);
      }

      public Spark End_CreateSpark(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_CreateSpark();
      }

      #endif

      public Spark CreateSpark(Location worldLocation)
      {
        #if !SILVERLIGHT
        send_CreateSpark(worldLocation);
        return recv_CreateSpark();

        #else
        var asyncResult = Begin_CreateSpark(null, null, worldLocation);
        return End_CreateSpark(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_CreateSpark(AsyncCallback callback, object state, Location worldLocation)
      #else
      public void send_CreateSpark(Location worldLocation)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("CreateSpark", TMessageType.Call, seqid_));
        CreateSpark_args args = new CreateSpark_args();
        args.WorldLocation = worldLocation;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Spark recv_CreateSpark()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CreateSpark_result result = new CreateSpark_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CreateSpark failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetAllSparks(AsyncCallback callback, object state)
      {
        return send_GetAllSparks(callback, state);
      }

      public List<Spark> End_GetAllSparks(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAllSparks();
      }

      #endif

      public List<Spark> GetAllSparks()
      {
        #if !SILVERLIGHT
        send_GetAllSparks();
        return recv_GetAllSparks();

        #else
        var asyncResult = Begin_GetAllSparks(null, null);
        return End_GetAllSparks(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAllSparks(AsyncCallback callback, object state)
      #else
      public void send_GetAllSparks()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetAllSparks", TMessageType.Call, seqid_));
        GetAllSparks_args args = new GetAllSparks_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Spark> recv_GetAllSparks()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAllSparks_result result = new GetAllSparks_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAllSparks failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RemoveSpark(AsyncCallback callback, object state, Spark sparkToRemove)
      {
        return send_RemoveSpark(callback, state, sparkToRemove);
      }

      public void End_RemoveSpark(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_RemoveSpark();
      }

      #endif

      public void RemoveSpark(Spark sparkToRemove)
      {
        #if !SILVERLIGHT
        send_RemoveSpark(sparkToRemove);
        recv_RemoveSpark();

        #else
        var asyncResult = Begin_RemoveSpark(null, null, sparkToRemove);
        End_RemoveSpark(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RemoveSpark(AsyncCallback callback, object state, Spark sparkToRemove)
      #else
      public void send_RemoveSpark(Spark sparkToRemove)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RemoveSpark", TMessageType.Call, seqid_));
        RemoveSpark_args args = new RemoveSpark_args();
        args.SparkToRemove = sparkToRemove;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_RemoveSpark()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RemoveSpark_result result = new RemoveSpark_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RemoveAllSparks(AsyncCallback callback, object state)
      {
        return send_RemoveAllSparks(callback, state);
      }

      public void End_RemoveAllSparks(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_RemoveAllSparks();
      }

      #endif

      public void RemoveAllSparks()
      {
        #if !SILVERLIGHT
        send_RemoveAllSparks();
        recv_RemoveAllSparks();

        #else
        var asyncResult = Begin_RemoveAllSparks(null, null);
        End_RemoveAllSparks(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RemoveAllSparks(AsyncCallback callback, object state)
      #else
      public void send_RemoveAllSparks()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RemoveAllSparks", TMessageType.Call, seqid_));
        RemoveAllSparks_args args = new RemoveAllSparks_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_RemoveAllSparks()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RemoveAllSparks_result result = new RemoveAllSparks_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DispatchMovementCommand(AsyncCallback callback, object state, Spark spark, MovementTypes movementCommand)
      {
        return send_DispatchMovementCommand(callback, state, spark, movementCommand);
      }

      public bool End_DispatchMovementCommand(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DispatchMovementCommand();
      }

      #endif

      public bool DispatchMovementCommand(Spark spark, MovementTypes movementCommand)
      {
        #if !SILVERLIGHT
        send_DispatchMovementCommand(spark, movementCommand);
        return recv_DispatchMovementCommand();

        #else
        var asyncResult = Begin_DispatchMovementCommand(null, null, spark, movementCommand);
        return End_DispatchMovementCommand(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DispatchMovementCommand(AsyncCallback callback, object state, Spark spark, MovementTypes movementCommand)
      #else
      public void send_DispatchMovementCommand(Spark spark, MovementTypes movementCommand)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DispatchMovementCommand", TMessageType.Call, seqid_));
        DispatchMovementCommand_args args = new DispatchMovementCommand_args();
        args.Spark = spark;
        args.MovementCommand = movementCommand;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_DispatchMovementCommand()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DispatchMovementCommand_result result = new DispatchMovementCommand_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DispatchMovementCommand failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DispatchOrientationCommand(AsyncCallback callback, object state, Spark spark, OrientationTypes orientationCommand)
      {
        return send_DispatchOrientationCommand(callback, state, spark, orientationCommand);
      }

      public void End_DispatchOrientationCommand(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_DispatchOrientationCommand();
      }

      #endif

      public void DispatchOrientationCommand(Spark spark, OrientationTypes orientationCommand)
      {
        #if !SILVERLIGHT
        send_DispatchOrientationCommand(spark, orientationCommand);
        recv_DispatchOrientationCommand();

        #else
        var asyncResult = Begin_DispatchOrientationCommand(null, null, spark, orientationCommand);
        End_DispatchOrientationCommand(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DispatchOrientationCommand(AsyncCallback callback, object state, Spark spark, OrientationTypes orientationCommand)
      #else
      public void send_DispatchOrientationCommand(Spark spark, OrientationTypes orientationCommand)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DispatchOrientationCommand", TMessageType.Call, seqid_));
        DispatchOrientationCommand_args args = new DispatchOrientationCommand_args();
        args.Spark = spark;
        args.OrientationCommand = orientationCommand;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_DispatchOrientationCommand()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DispatchOrientationCommand_result result = new DispatchOrientationCommand_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["CreateSpark"] = CreateSpark_Process;
        processMap_["GetAllSparks"] = GetAllSparks_Process;
        processMap_["RemoveSpark"] = RemoveSpark_Process;
        processMap_["RemoveAllSparks"] = RemoveAllSparks_Process;
        processMap_["DispatchMovementCommand"] = DispatchMovementCommand_Process;
        processMap_["DispatchOrientationCommand"] = DispatchOrientationCommand_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void CreateSpark_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CreateSpark_args args = new CreateSpark_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CreateSpark_result result = new CreateSpark_result();
        result.Success = iface_.CreateSpark(args.WorldLocation);
        oprot.WriteMessageBegin(new TMessage("CreateSpark", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAllSparks_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAllSparks_args args = new GetAllSparks_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAllSparks_result result = new GetAllSparks_result();
        result.Success = iface_.GetAllSparks();
        oprot.WriteMessageBegin(new TMessage("GetAllSparks", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RemoveSpark_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RemoveSpark_args args = new RemoveSpark_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RemoveSpark_result result = new RemoveSpark_result();
        iface_.RemoveSpark(args.SparkToRemove);
        oprot.WriteMessageBegin(new TMessage("RemoveSpark", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RemoveAllSparks_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RemoveAllSparks_args args = new RemoveAllSparks_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RemoveAllSparks_result result = new RemoveAllSparks_result();
        iface_.RemoveAllSparks();
        oprot.WriteMessageBegin(new TMessage("RemoveAllSparks", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DispatchMovementCommand_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DispatchMovementCommand_args args = new DispatchMovementCommand_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DispatchMovementCommand_result result = new DispatchMovementCommand_result();
        result.Success = iface_.DispatchMovementCommand(args.Spark, args.MovementCommand);
        oprot.WriteMessageBegin(new TMessage("DispatchMovementCommand", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DispatchOrientationCommand_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DispatchOrientationCommand_args args = new DispatchOrientationCommand_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DispatchOrientationCommand_result result = new DispatchOrientationCommand_result();
        iface_.DispatchOrientationCommand(args.Spark, args.OrientationCommand);
        oprot.WriteMessageBegin(new TMessage("DispatchOrientationCommand", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CreateSpark_args : TBase
    {
      private Location _worldLocation;

      public Location WorldLocation
      {
        get
        {
          return _worldLocation;
        }
        set
        {
          __isset.worldLocation = true;
          this._worldLocation = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool worldLocation;
      }

      public CreateSpark_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                WorldLocation = new Location();
                WorldLocation.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CreateSpark_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (WorldLocation != null && __isset.worldLocation) {
          field.Name = "worldLocation";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          WorldLocation.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CreateSpark_args(");
        sb.Append("WorldLocation: ");
        sb.Append(WorldLocation== null ? "<null>" : WorldLocation.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CreateSpark_result : TBase
    {
      private Spark _success;

      public Spark Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public CreateSpark_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Spark();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CreateSpark_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CreateSpark_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAllSparks_args : TBase
    {

      public GetAllSparks_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAllSparks_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAllSparks_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAllSparks_result : TBase
    {
      private List<Spark> _success;

      public List<Spark> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAllSparks_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Spark>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    Spark _elem2 = new Spark();
                    _elem2 = new Spark();
                    _elem2.Read(iprot);
                    Success.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAllSparks_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Spark _iter3 in Success)
              {
                _iter3.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAllSparks_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveSpark_args : TBase
    {
      private Spark _sparkToRemove;

      public Spark SparkToRemove
      {
        get
        {
          return _sparkToRemove;
        }
        set
        {
          __isset.sparkToRemove = true;
          this._sparkToRemove = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sparkToRemove;
      }

      public RemoveSpark_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SparkToRemove = new Spark();
                SparkToRemove.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveSpark_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SparkToRemove != null && __isset.sparkToRemove) {
          field.Name = "sparkToRemove";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          SparkToRemove.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveSpark_args(");
        sb.Append("SparkToRemove: ");
        sb.Append(SparkToRemove== null ? "<null>" : SparkToRemove.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveSpark_result : TBase
    {

      public RemoveSpark_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveSpark_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveSpark_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveAllSparks_args : TBase
    {

      public RemoveAllSparks_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveAllSparks_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveAllSparks_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveAllSparks_result : TBase
    {

      public RemoveAllSparks_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RemoveAllSparks_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RemoveAllSparks_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DispatchMovementCommand_args : TBase
    {
      private Spark _spark;
      private MovementTypes _movementCommand;

      public Spark Spark
      {
        get
        {
          return _spark;
        }
        set
        {
          __isset.spark = true;
          this._spark = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="MovementTypes"/>
      /// </summary>
      public MovementTypes MovementCommand
      {
        get
        {
          return _movementCommand;
        }
        set
        {
          __isset.movementCommand = true;
          this._movementCommand = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool spark;
        public bool movementCommand;
      }

      public DispatchMovementCommand_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Spark = new Spark();
                Spark.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                MovementCommand = (MovementTypes)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DispatchMovementCommand_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Spark != null && __isset.spark) {
          field.Name = "spark";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Spark.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.movementCommand) {
          field.Name = "movementCommand";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)MovementCommand);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DispatchMovementCommand_args(");
        sb.Append("Spark: ");
        sb.Append(Spark== null ? "<null>" : Spark.ToString());
        sb.Append(",MovementCommand: ");
        sb.Append(MovementCommand);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DispatchMovementCommand_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DispatchMovementCommand_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DispatchMovementCommand_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DispatchMovementCommand_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DispatchOrientationCommand_args : TBase
    {
      private Spark _spark;
      private OrientationTypes _orientationCommand;

      public Spark Spark
      {
        get
        {
          return _spark;
        }
        set
        {
          __isset.spark = true;
          this._spark = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="OrientationTypes"/>
      /// </summary>
      public OrientationTypes OrientationCommand
      {
        get
        {
          return _orientationCommand;
        }
        set
        {
          __isset.orientationCommand = true;
          this._orientationCommand = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool spark;
        public bool orientationCommand;
      }

      public DispatchOrientationCommand_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Spark = new Spark();
                Spark.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                OrientationCommand = (OrientationTypes)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DispatchOrientationCommand_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Spark != null && __isset.spark) {
          field.Name = "spark";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Spark.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.orientationCommand) {
          field.Name = "orientationCommand";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)OrientationCommand);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DispatchOrientationCommand_args(");
        sb.Append("Spark: ");
        sb.Append(Spark== null ? "<null>" : Spark.ToString());
        sb.Append(",OrientationCommand: ");
        sb.Append(OrientationCommand);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DispatchOrientationCommand_result : TBase
    {

      public DispatchOrientationCommand_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DispatchOrientationCommand_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DispatchOrientationCommand_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
