/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FlameService_H
#define FlameService_H

#include <thrift/TDispatchProcessor.h>
#include "Flame_types.h"

namespace Flame {

class FlameServiceIf {
 public:
  virtual ~FlameServiceIf() {}
  virtual void CreateSpark(Spark& _return, const Location& worldLocation) = 0;
  virtual void GetAllSparks(std::vector<Spark> & _return) = 0;
  virtual void RemoveSpark(const Spark& sparkToRemove) = 0;
  virtual void RemoveAllSparks() = 0;
  virtual bool DispatchMovementCommand(const Spark& spark, const MovementTypes::type movementCommand) = 0;
  virtual void DispatchOrientationCommand(const Spark& spark, const OrientationTypes::type orientationCommand) = 0;
};

class FlameServiceIfFactory {
 public:
  typedef FlameServiceIf Handler;

  virtual ~FlameServiceIfFactory() {}

  virtual FlameServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FlameServiceIf* /* handler */) = 0;
};

class FlameServiceIfSingletonFactory : virtual public FlameServiceIfFactory {
 public:
  FlameServiceIfSingletonFactory(const boost::shared_ptr<FlameServiceIf>& iface) : iface_(iface) {}
  virtual ~FlameServiceIfSingletonFactory() {}

  virtual FlameServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FlameServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<FlameServiceIf> iface_;
};

class FlameServiceNull : virtual public FlameServiceIf {
 public:
  virtual ~FlameServiceNull() {}
  void CreateSpark(Spark& /* _return */, const Location& /* worldLocation */) {
    return;
  }
  void GetAllSparks(std::vector<Spark> & /* _return */) {
    return;
  }
  void RemoveSpark(const Spark& /* sparkToRemove */) {
    return;
  }
  void RemoveAllSparks() {
    return;
  }
  bool DispatchMovementCommand(const Spark& /* spark */, const MovementTypes::type /* movementCommand */) {
    bool _return = false;
    return _return;
  }
  void DispatchOrientationCommand(const Spark& /* spark */, const OrientationTypes::type /* orientationCommand */) {
    return;
  }
};

typedef struct _FlameService_CreateSpark_args__isset {
  _FlameService_CreateSpark_args__isset() : worldLocation(false) {}
  bool worldLocation;
} _FlameService_CreateSpark_args__isset;

class FlameService_CreateSpark_args {
 public:

  FlameService_CreateSpark_args() {
  }

  virtual ~FlameService_CreateSpark_args() throw() {}

  Location worldLocation;

  _FlameService_CreateSpark_args__isset __isset;

  void __set_worldLocation(const Location& val) {
    worldLocation = val;
  }

  bool operator == (const FlameService_CreateSpark_args & rhs) const
  {
    if (!(worldLocation == rhs.worldLocation))
      return false;
    return true;
  }
  bool operator != (const FlameService_CreateSpark_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FlameService_CreateSpark_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FlameService_CreateSpark_pargs {
 public:


  virtual ~FlameService_CreateSpark_pargs() throw() {}

  const Location* worldLocation;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FlameService_CreateSpark_result__isset {
  _FlameService_CreateSpark_result__isset() : success(false) {}
  bool success;
} _FlameService_CreateSpark_result__isset;

class FlameService_CreateSpark_result {
 public:

  FlameService_CreateSpark_result() {
  }

  virtual ~FlameService_CreateSpark_result() throw() {}

  Spark success;

  _FlameService_CreateSpark_result__isset __isset;

  void __set_success(const Spark& val) {
    success = val;
  }

  bool operator == (const FlameService_CreateSpark_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FlameService_CreateSpark_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FlameService_CreateSpark_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FlameService_CreateSpark_presult__isset {
  _FlameService_CreateSpark_presult__isset() : success(false) {}
  bool success;
} _FlameService_CreateSpark_presult__isset;

class FlameService_CreateSpark_presult {
 public:


  virtual ~FlameService_CreateSpark_presult() throw() {}

  Spark* success;

  _FlameService_CreateSpark_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class FlameService_GetAllSparks_args {
 public:

  FlameService_GetAllSparks_args() {
  }

  virtual ~FlameService_GetAllSparks_args() throw() {}


  bool operator == (const FlameService_GetAllSparks_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FlameService_GetAllSparks_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FlameService_GetAllSparks_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FlameService_GetAllSparks_pargs {
 public:


  virtual ~FlameService_GetAllSparks_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FlameService_GetAllSparks_result__isset {
  _FlameService_GetAllSparks_result__isset() : success(false) {}
  bool success;
} _FlameService_GetAllSparks_result__isset;

class FlameService_GetAllSparks_result {
 public:

  FlameService_GetAllSparks_result() {
  }

  virtual ~FlameService_GetAllSparks_result() throw() {}

  std::vector<Spark>  success;

  _FlameService_GetAllSparks_result__isset __isset;

  void __set_success(const std::vector<Spark> & val) {
    success = val;
  }

  bool operator == (const FlameService_GetAllSparks_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FlameService_GetAllSparks_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FlameService_GetAllSparks_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FlameService_GetAllSparks_presult__isset {
  _FlameService_GetAllSparks_presult__isset() : success(false) {}
  bool success;
} _FlameService_GetAllSparks_presult__isset;

class FlameService_GetAllSparks_presult {
 public:


  virtual ~FlameService_GetAllSparks_presult() throw() {}

  std::vector<Spark> * success;

  _FlameService_GetAllSparks_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FlameService_RemoveSpark_args__isset {
  _FlameService_RemoveSpark_args__isset() : sparkToRemove(false) {}
  bool sparkToRemove;
} _FlameService_RemoveSpark_args__isset;

class FlameService_RemoveSpark_args {
 public:

  FlameService_RemoveSpark_args() {
  }

  virtual ~FlameService_RemoveSpark_args() throw() {}

  Spark sparkToRemove;

  _FlameService_RemoveSpark_args__isset __isset;

  void __set_sparkToRemove(const Spark& val) {
    sparkToRemove = val;
  }

  bool operator == (const FlameService_RemoveSpark_args & rhs) const
  {
    if (!(sparkToRemove == rhs.sparkToRemove))
      return false;
    return true;
  }
  bool operator != (const FlameService_RemoveSpark_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FlameService_RemoveSpark_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FlameService_RemoveSpark_pargs {
 public:


  virtual ~FlameService_RemoveSpark_pargs() throw() {}

  const Spark* sparkToRemove;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FlameService_RemoveSpark_result {
 public:

  FlameService_RemoveSpark_result() {
  }

  virtual ~FlameService_RemoveSpark_result() throw() {}


  bool operator == (const FlameService_RemoveSpark_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FlameService_RemoveSpark_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FlameService_RemoveSpark_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FlameService_RemoveSpark_presult {
 public:


  virtual ~FlameService_RemoveSpark_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class FlameService_RemoveAllSparks_args {
 public:

  FlameService_RemoveAllSparks_args() {
  }

  virtual ~FlameService_RemoveAllSparks_args() throw() {}


  bool operator == (const FlameService_RemoveAllSparks_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FlameService_RemoveAllSparks_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FlameService_RemoveAllSparks_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FlameService_RemoveAllSparks_pargs {
 public:


  virtual ~FlameService_RemoveAllSparks_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FlameService_RemoveAllSparks_result {
 public:

  FlameService_RemoveAllSparks_result() {
  }

  virtual ~FlameService_RemoveAllSparks_result() throw() {}


  bool operator == (const FlameService_RemoveAllSparks_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FlameService_RemoveAllSparks_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FlameService_RemoveAllSparks_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FlameService_RemoveAllSparks_presult {
 public:


  virtual ~FlameService_RemoveAllSparks_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FlameService_DispatchMovementCommand_args__isset {
  _FlameService_DispatchMovementCommand_args__isset() : spark(false), movementCommand(false) {}
  bool spark;
  bool movementCommand;
} _FlameService_DispatchMovementCommand_args__isset;

class FlameService_DispatchMovementCommand_args {
 public:

  FlameService_DispatchMovementCommand_args() : movementCommand((MovementTypes::type)0) {
  }

  virtual ~FlameService_DispatchMovementCommand_args() throw() {}

  Spark spark;
  MovementTypes::type movementCommand;

  _FlameService_DispatchMovementCommand_args__isset __isset;

  void __set_spark(const Spark& val) {
    spark = val;
  }

  void __set_movementCommand(const MovementTypes::type val) {
    movementCommand = val;
  }

  bool operator == (const FlameService_DispatchMovementCommand_args & rhs) const
  {
    if (!(spark == rhs.spark))
      return false;
    if (!(movementCommand == rhs.movementCommand))
      return false;
    return true;
  }
  bool operator != (const FlameService_DispatchMovementCommand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FlameService_DispatchMovementCommand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FlameService_DispatchMovementCommand_pargs {
 public:


  virtual ~FlameService_DispatchMovementCommand_pargs() throw() {}

  const Spark* spark;
  const MovementTypes::type* movementCommand;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FlameService_DispatchMovementCommand_result__isset {
  _FlameService_DispatchMovementCommand_result__isset() : success(false) {}
  bool success;
} _FlameService_DispatchMovementCommand_result__isset;

class FlameService_DispatchMovementCommand_result {
 public:

  FlameService_DispatchMovementCommand_result() : success(0) {
  }

  virtual ~FlameService_DispatchMovementCommand_result() throw() {}

  bool success;

  _FlameService_DispatchMovementCommand_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const FlameService_DispatchMovementCommand_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FlameService_DispatchMovementCommand_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FlameService_DispatchMovementCommand_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FlameService_DispatchMovementCommand_presult__isset {
  _FlameService_DispatchMovementCommand_presult__isset() : success(false) {}
  bool success;
} _FlameService_DispatchMovementCommand_presult__isset;

class FlameService_DispatchMovementCommand_presult {
 public:


  virtual ~FlameService_DispatchMovementCommand_presult() throw() {}

  bool* success;

  _FlameService_DispatchMovementCommand_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FlameService_DispatchOrientationCommand_args__isset {
  _FlameService_DispatchOrientationCommand_args__isset() : spark(false), orientationCommand(false) {}
  bool spark;
  bool orientationCommand;
} _FlameService_DispatchOrientationCommand_args__isset;

class FlameService_DispatchOrientationCommand_args {
 public:

  FlameService_DispatchOrientationCommand_args() : orientationCommand((OrientationTypes::type)0) {
  }

  virtual ~FlameService_DispatchOrientationCommand_args() throw() {}

  Spark spark;
  OrientationTypes::type orientationCommand;

  _FlameService_DispatchOrientationCommand_args__isset __isset;

  void __set_spark(const Spark& val) {
    spark = val;
  }

  void __set_orientationCommand(const OrientationTypes::type val) {
    orientationCommand = val;
  }

  bool operator == (const FlameService_DispatchOrientationCommand_args & rhs) const
  {
    if (!(spark == rhs.spark))
      return false;
    if (!(orientationCommand == rhs.orientationCommand))
      return false;
    return true;
  }
  bool operator != (const FlameService_DispatchOrientationCommand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FlameService_DispatchOrientationCommand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FlameService_DispatchOrientationCommand_pargs {
 public:


  virtual ~FlameService_DispatchOrientationCommand_pargs() throw() {}

  const Spark* spark;
  const OrientationTypes::type* orientationCommand;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FlameService_DispatchOrientationCommand_result {
 public:

  FlameService_DispatchOrientationCommand_result() {
  }

  virtual ~FlameService_DispatchOrientationCommand_result() throw() {}


  bool operator == (const FlameService_DispatchOrientationCommand_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FlameService_DispatchOrientationCommand_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FlameService_DispatchOrientationCommand_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FlameService_DispatchOrientationCommand_presult {
 public:


  virtual ~FlameService_DispatchOrientationCommand_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class FlameServiceClient : virtual public FlameServiceIf {
 public:
  FlameServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  FlameServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void CreateSpark(Spark& _return, const Location& worldLocation);
  void send_CreateSpark(const Location& worldLocation);
  void recv_CreateSpark(Spark& _return);
  void GetAllSparks(std::vector<Spark> & _return);
  void send_GetAllSparks();
  void recv_GetAllSparks(std::vector<Spark> & _return);
  void RemoveSpark(const Spark& sparkToRemove);
  void send_RemoveSpark(const Spark& sparkToRemove);
  void recv_RemoveSpark();
  void RemoveAllSparks();
  void send_RemoveAllSparks();
  void recv_RemoveAllSparks();
  bool DispatchMovementCommand(const Spark& spark, const MovementTypes::type movementCommand);
  void send_DispatchMovementCommand(const Spark& spark, const MovementTypes::type movementCommand);
  bool recv_DispatchMovementCommand();
  void DispatchOrientationCommand(const Spark& spark, const OrientationTypes::type orientationCommand);
  void send_DispatchOrientationCommand(const Spark& spark, const OrientationTypes::type orientationCommand);
  void recv_DispatchOrientationCommand();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FlameServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<FlameServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (FlameServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_CreateSpark(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAllSparks(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RemoveSpark(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RemoveAllSparks(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DispatchMovementCommand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DispatchOrientationCommand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FlameServiceProcessor(boost::shared_ptr<FlameServiceIf> iface) :
    iface_(iface) {
    processMap_["CreateSpark"] = &FlameServiceProcessor::process_CreateSpark;
    processMap_["GetAllSparks"] = &FlameServiceProcessor::process_GetAllSparks;
    processMap_["RemoveSpark"] = &FlameServiceProcessor::process_RemoveSpark;
    processMap_["RemoveAllSparks"] = &FlameServiceProcessor::process_RemoveAllSparks;
    processMap_["DispatchMovementCommand"] = &FlameServiceProcessor::process_DispatchMovementCommand;
    processMap_["DispatchOrientationCommand"] = &FlameServiceProcessor::process_DispatchOrientationCommand;
  }

  virtual ~FlameServiceProcessor() {}
};

class FlameServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FlameServiceProcessorFactory(const ::boost::shared_ptr< FlameServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< FlameServiceIfFactory > handlerFactory_;
};

class FlameServiceMultiface : virtual public FlameServiceIf {
 public:
  FlameServiceMultiface(std::vector<boost::shared_ptr<FlameServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FlameServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<FlameServiceIf> > ifaces_;
  FlameServiceMultiface() {}
  void add(boost::shared_ptr<FlameServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void CreateSpark(Spark& _return, const Location& worldLocation) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CreateSpark(_return, worldLocation);
    }
    ifaces_[i]->CreateSpark(_return, worldLocation);
    return;
  }

  void GetAllSparks(std::vector<Spark> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAllSparks(_return);
    }
    ifaces_[i]->GetAllSparks(_return);
    return;
  }

  void RemoveSpark(const Spark& sparkToRemove) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RemoveSpark(sparkToRemove);
    }
    ifaces_[i]->RemoveSpark(sparkToRemove);
  }

  void RemoveAllSparks() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RemoveAllSparks();
    }
    ifaces_[i]->RemoveAllSparks();
  }

  bool DispatchMovementCommand(const Spark& spark, const MovementTypes::type movementCommand) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DispatchMovementCommand(spark, movementCommand);
    }
    return ifaces_[i]->DispatchMovementCommand(spark, movementCommand);
  }

  void DispatchOrientationCommand(const Spark& spark, const OrientationTypes::type orientationCommand) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DispatchOrientationCommand(spark, orientationCommand);
    }
    ifaces_[i]->DispatchOrientationCommand(spark, orientationCommand);
  }

};

} // namespace

#endif
