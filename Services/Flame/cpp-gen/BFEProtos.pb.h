// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BFEProtos.proto

#ifndef PROTOBUF_BFEProtos_2eproto__INCLUDED
#define PROTOBUF_BFEProtos_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Thilenius {
namespace BFEProtos {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BFEProtos_2eproto();
void protobuf_AssignDesc_BFEProtos_2eproto();
void protobuf_ShutdownFile_BFEProtos_2eproto();

class BFEMessage;
class BFEAuthRequest;
class BFEAuthResponse;

// ===================================================================

class BFEMessage : public ::google::protobuf::Message {
 public:
  BFEMessage();
  virtual ~BFEMessage();
  
  BFEMessage(const BFEMessage& from);
  
  inline BFEMessage& operator=(const BFEMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BFEMessage& default_instance();
  
  void Swap(BFEMessage* other);
  
  // implements Message ----------------------------------------------
  
  BFEMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BFEMessage& from);
  void MergeFrom(const BFEMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BFEMessage)
  // @@protoc_insertion_point(class_scope:Thilenius.BFEProtos.BFEMessage)
 private:
  
  ::google::protobuf::internal::ExtensionSet _extensions_;
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_BFEProtos_2eproto();
  friend void protobuf_AssignDesc_BFEProtos_2eproto();
  friend void protobuf_ShutdownFile_BFEProtos_2eproto();
  
  void InitAsDefaultInstance();
  static BFEMessage* default_instance_;
};
// -------------------------------------------------------------------

class BFEAuthRequest : public ::google::protobuf::Message {
 public:
  BFEAuthRequest();
  virtual ~BFEAuthRequest();
  
  BFEAuthRequest(const BFEAuthRequest& from);
  
  inline BFEAuthRequest& operator=(const BFEAuthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BFEAuthRequest& default_instance();
  
  void Swap(BFEAuthRequest* other);
  
  // implements Message ----------------------------------------------
  
  BFEAuthRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BFEAuthRequest& from);
  void MergeFrom(const BFEAuthRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  
  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  static const int kBFEAuthRequestExtFieldNumber = 100;
  static ::google::protobuf::internal::ExtensionIdentifier< ::Thilenius::BFEProtos::BFEMessage,
      ::google::protobuf::internal::MessageTypeTraits< ::Thilenius::BFEProtos::BFEAuthRequest >, 11, false >
    BFEAuthRequest_ext;
  // @@protoc_insertion_point(class_scope:Thilenius.BFEProtos.BFEAuthRequest)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* username_;
  ::std::string* password_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_BFEProtos_2eproto();
  friend void protobuf_AssignDesc_BFEProtos_2eproto();
  friend void protobuf_ShutdownFile_BFEProtos_2eproto();
  
  void InitAsDefaultInstance();
  static BFEAuthRequest* default_instance_;
};
// -------------------------------------------------------------------

class BFEAuthResponse : public ::google::protobuf::Message {
 public:
  BFEAuthResponse();
  virtual ~BFEAuthResponse();
  
  BFEAuthResponse(const BFEAuthResponse& from);
  
  inline BFEAuthResponse& operator=(const BFEAuthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BFEAuthResponse& default_instance();
  
  void Swap(BFEAuthResponse* other);
  
  // implements Message ----------------------------------------------
  
  BFEAuthResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BFEAuthResponse& from);
  void MergeFrom(const BFEAuthResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string auth_token = 1;
  inline bool has_auth_token() const;
  inline void clear_auth_token();
  static const int kAuthTokenFieldNumber = 1;
  inline const ::std::string& auth_token() const;
  inline void set_auth_token(const ::std::string& value);
  inline void set_auth_token(const char* value);
  inline void set_auth_token(const char* value, size_t size);
  inline ::std::string* mutable_auth_token();
  inline ::std::string* release_auth_token();
  
  // optional string experation_time = 2;
  inline bool has_experation_time() const;
  inline void clear_experation_time();
  static const int kExperationTimeFieldNumber = 2;
  inline const ::std::string& experation_time() const;
  inline void set_experation_time(const ::std::string& value);
  inline void set_experation_time(const char* value);
  inline void set_experation_time(const char* value, size_t size);
  inline ::std::string* mutable_experation_time();
  inline ::std::string* release_experation_time();
  
  static const int kBFEAuthResponseExtFieldNumber = 101;
  static ::google::protobuf::internal::ExtensionIdentifier< ::Thilenius::BFEProtos::BFEMessage,
      ::google::protobuf::internal::MessageTypeTraits< ::Thilenius::BFEProtos::BFEAuthResponse >, 11, false >
    BFEAuthResponse_ext;
  // @@protoc_insertion_point(class_scope:Thilenius.BFEProtos.BFEAuthResponse)
 private:
  inline void set_has_auth_token();
  inline void clear_has_auth_token();
  inline void set_has_experation_time();
  inline void clear_has_experation_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* auth_token_;
  ::std::string* experation_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_BFEProtos_2eproto();
  friend void protobuf_AssignDesc_BFEProtos_2eproto();
  friend void protobuf_ShutdownFile_BFEProtos_2eproto();
  
  void InitAsDefaultInstance();
  static BFEAuthResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// BFEMessage

// -------------------------------------------------------------------

// BFEAuthRequest

// required string username = 1;
inline bool BFEAuthRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BFEAuthRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BFEAuthRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BFEAuthRequest::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& BFEAuthRequest::username() const {
  return *username_;
}
inline void BFEAuthRequest::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void BFEAuthRequest::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void BFEAuthRequest::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BFEAuthRequest::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* BFEAuthRequest::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string password = 2;
inline bool BFEAuthRequest::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BFEAuthRequest::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BFEAuthRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BFEAuthRequest::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& BFEAuthRequest::password() const {
  return *password_;
}
inline void BFEAuthRequest::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void BFEAuthRequest::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void BFEAuthRequest::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BFEAuthRequest::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* BFEAuthRequest::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// BFEAuthResponse

// optional string auth_token = 1;
inline bool BFEAuthResponse::has_auth_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BFEAuthResponse::set_has_auth_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BFEAuthResponse::clear_has_auth_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BFEAuthResponse::clear_auth_token() {
  if (auth_token_ != &::google::protobuf::internal::kEmptyString) {
    auth_token_->clear();
  }
  clear_has_auth_token();
}
inline const ::std::string& BFEAuthResponse::auth_token() const {
  return *auth_token_;
}
inline void BFEAuthResponse::set_auth_token(const ::std::string& value) {
  set_has_auth_token();
  if (auth_token_ == &::google::protobuf::internal::kEmptyString) {
    auth_token_ = new ::std::string;
  }
  auth_token_->assign(value);
}
inline void BFEAuthResponse::set_auth_token(const char* value) {
  set_has_auth_token();
  if (auth_token_ == &::google::protobuf::internal::kEmptyString) {
    auth_token_ = new ::std::string;
  }
  auth_token_->assign(value);
}
inline void BFEAuthResponse::set_auth_token(const char* value, size_t size) {
  set_has_auth_token();
  if (auth_token_ == &::google::protobuf::internal::kEmptyString) {
    auth_token_ = new ::std::string;
  }
  auth_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BFEAuthResponse::mutable_auth_token() {
  set_has_auth_token();
  if (auth_token_ == &::google::protobuf::internal::kEmptyString) {
    auth_token_ = new ::std::string;
  }
  return auth_token_;
}
inline ::std::string* BFEAuthResponse::release_auth_token() {
  clear_has_auth_token();
  if (auth_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = auth_token_;
    auth_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string experation_time = 2;
inline bool BFEAuthResponse::has_experation_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BFEAuthResponse::set_has_experation_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BFEAuthResponse::clear_has_experation_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BFEAuthResponse::clear_experation_time() {
  if (experation_time_ != &::google::protobuf::internal::kEmptyString) {
    experation_time_->clear();
  }
  clear_has_experation_time();
}
inline const ::std::string& BFEAuthResponse::experation_time() const {
  return *experation_time_;
}
inline void BFEAuthResponse::set_experation_time(const ::std::string& value) {
  set_has_experation_time();
  if (experation_time_ == &::google::protobuf::internal::kEmptyString) {
    experation_time_ = new ::std::string;
  }
  experation_time_->assign(value);
}
inline void BFEAuthResponse::set_experation_time(const char* value) {
  set_has_experation_time();
  if (experation_time_ == &::google::protobuf::internal::kEmptyString) {
    experation_time_ = new ::std::string;
  }
  experation_time_->assign(value);
}
inline void BFEAuthResponse::set_experation_time(const char* value, size_t size) {
  set_has_experation_time();
  if (experation_time_ == &::google::protobuf::internal::kEmptyString) {
    experation_time_ = new ::std::string;
  }
  experation_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BFEAuthResponse::mutable_experation_time() {
  set_has_experation_time();
  if (experation_time_ == &::google::protobuf::internal::kEmptyString) {
    experation_time_ = new ::std::string;
  }
  return experation_time_;
}
inline ::std::string* BFEAuthResponse::release_experation_time() {
  clear_has_experation_time();
  if (experation_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = experation_time_;
    experation_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace BFEProtos
}  // namespace Thilenius

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BFEProtos_2eproto__INCLUDED
