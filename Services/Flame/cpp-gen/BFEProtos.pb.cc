// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BFEProtos.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Thilenius {
namespace BFEProtos {

namespace {

const ::google::protobuf::Descriptor* BFEMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BFEMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* BFEAuthRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BFEAuthRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BFEAuthResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BFEAuthResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BFEProtos_2eproto() {
  protobuf_AddDesc_BFEProtos_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BFEProtos.proto");
  GOOGLE_CHECK(file != NULL);
  BFEMessage_descriptor_ = file->message_type(0);
  static const int BFEMessage_offsets_[1] = {
  };
  BFEMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BFEMessage_descriptor_,
      BFEMessage::default_instance_,
      BFEMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFEMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFEMessage, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFEMessage, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BFEMessage));
  BFEAuthRequest_descriptor_ = file->message_type(1);
  static const int BFEAuthRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFEAuthRequest, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFEAuthRequest, password_),
  };
  BFEAuthRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BFEAuthRequest_descriptor_,
      BFEAuthRequest::default_instance_,
      BFEAuthRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFEAuthRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFEAuthRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BFEAuthRequest));
  BFEAuthResponse_descriptor_ = file->message_type(2);
  static const int BFEAuthResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFEAuthResponse, auth_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFEAuthResponse, experation_time_),
  };
  BFEAuthResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BFEAuthResponse_descriptor_,
      BFEAuthResponse::default_instance_,
      BFEAuthResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFEAuthResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFEAuthResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BFEAuthResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BFEProtos_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BFEMessage_descriptor_, &BFEMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BFEAuthRequest_descriptor_, &BFEAuthRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BFEAuthResponse_descriptor_, &BFEAuthResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BFEProtos_2eproto() {
  delete BFEMessage::default_instance_;
  delete BFEMessage_reflection_;
  delete BFEAuthRequest::default_instance_;
  delete BFEAuthRequest_reflection_;
  delete BFEAuthResponse::default_instance_;
  delete BFEAuthResponse_reflection_;
}

void protobuf_AddDesc_BFEProtos_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017BFEProtos.proto\022\023Thilenius.BFEProtos\"\026"
    "\n\nBFEMessage*\010\010d\020\200\200\200\200\002\"\226\001\n\016BFEAuthReques"
    "t\022\020\n\010username\030\001 \002(\t\022\020\n\010password\030\002 \002(\t2`\n"
    "\022BFEAuthRequest_ext\022\037.Thilenius.BFEProto"
    "s.BFEMessage\030d \001(\0132#.Thilenius.BFEProtos"
    ".BFEAuthRequest\"\242\001\n\017BFEAuthResponse\022\022\n\na"
    "uth_token\030\001 \001(\t\022\027\n\017experation_time\030\002 \001(\t"
    "2b\n\023BFEAuthResponse_ext\022\037.Thilenius.BFEP"
    "rotos.BFEMessage\030e \001(\0132$.Thilenius.BFEPr"
    "otos.BFEAuthResponseB0\n#com.thilenius.bl"
    "aze.frontend.protosB\tBFEProtos", 430);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BFEProtos.proto", &protobuf_RegisterTypes);
  BFEMessage::default_instance_ = new BFEMessage();
  BFEAuthRequest::default_instance_ = new BFEAuthRequest();
  BFEAuthResponse::default_instance_ = new BFEAuthResponse();
  BFEMessage::default_instance_->InitAsDefaultInstance();
  BFEAuthRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::Thilenius::BFEProtos::BFEMessage::default_instance(),
    100, 11, false, false,
    &::Thilenius::BFEProtos::BFEAuthRequest::default_instance());
  BFEAuthResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::Thilenius::BFEProtos::BFEMessage::default_instance(),
    101, 11, false, false,
    &::Thilenius::BFEProtos::BFEAuthResponse::default_instance());
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BFEProtos_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BFEProtos_2eproto {
  StaticDescriptorInitializer_BFEProtos_2eproto() {
    protobuf_AddDesc_BFEProtos_2eproto();
  }
} static_descriptor_initializer_BFEProtos_2eproto_;


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BFEMessage::BFEMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BFEMessage::InitAsDefaultInstance() {
}

BFEMessage::BFEMessage(const BFEMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BFEMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BFEMessage::~BFEMessage() {
  SharedDtor();
}

void BFEMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BFEMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BFEMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BFEMessage_descriptor_;
}

const BFEMessage& BFEMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BFEProtos_2eproto();  return *default_instance_;
}

BFEMessage* BFEMessage::default_instance_ = NULL;

BFEMessage* BFEMessage::New() const {
  return new BFEMessage;
}

void BFEMessage::Clear() {
  _extensions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BFEMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    if ((800u <= tag)) {
      DO_(_extensions_.ParseField(tag, input, default_instance_,
                                  mutable_unknown_fields()));
      continue;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void BFEMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BFEMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BFEMessage::ByteSize() const {
  int total_size = 0;
  
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BFEMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BFEMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BFEMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BFEMessage::MergeFrom(const BFEMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BFEMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BFEMessage::CopyFrom(const BFEMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BFEMessage::IsInitialized() const {
  
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BFEMessage::Swap(BFEMessage* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BFEMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BFEMessage_descriptor_;
  metadata.reflection = BFEMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BFEAuthRequest::kUsernameFieldNumber;
const int BFEAuthRequest::kPasswordFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int BFEAuthRequest::kBFEAuthRequestExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::Thilenius::BFEProtos::BFEMessage,
    ::google::protobuf::internal::MessageTypeTraits< ::Thilenius::BFEProtos::BFEAuthRequest >, 11, false >
  BFEAuthRequest::BFEAuthRequest_ext(kBFEAuthRequestExtFieldNumber, ::Thilenius::BFEProtos::BFEAuthRequest::default_instance());
BFEAuthRequest::BFEAuthRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BFEAuthRequest::InitAsDefaultInstance() {
}

BFEAuthRequest::BFEAuthRequest(const BFEAuthRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BFEAuthRequest::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BFEAuthRequest::~BFEAuthRequest() {
  SharedDtor();
}

void BFEAuthRequest::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void BFEAuthRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BFEAuthRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BFEAuthRequest_descriptor_;
}

const BFEAuthRequest& BFEAuthRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BFEProtos_2eproto();  return *default_instance_;
}

BFEAuthRequest* BFEAuthRequest::default_instance_ = NULL;

BFEAuthRequest* BFEAuthRequest::New() const {
  return new BFEAuthRequest;
}

void BFEAuthRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BFEAuthRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }
      
      // required string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BFEAuthRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }
  
  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BFEAuthRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }
  
  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BFEAuthRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BFEAuthRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BFEAuthRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BFEAuthRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BFEAuthRequest::MergeFrom(const BFEAuthRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BFEAuthRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BFEAuthRequest::CopyFrom(const BFEAuthRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BFEAuthRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void BFEAuthRequest::Swap(BFEAuthRequest* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BFEAuthRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BFEAuthRequest_descriptor_;
  metadata.reflection = BFEAuthRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BFEAuthResponse::kAuthTokenFieldNumber;
const int BFEAuthResponse::kExperationTimeFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int BFEAuthResponse::kBFEAuthResponseExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::Thilenius::BFEProtos::BFEMessage,
    ::google::protobuf::internal::MessageTypeTraits< ::Thilenius::BFEProtos::BFEAuthResponse >, 11, false >
  BFEAuthResponse::BFEAuthResponse_ext(kBFEAuthResponseExtFieldNumber, ::Thilenius::BFEProtos::BFEAuthResponse::default_instance());
BFEAuthResponse::BFEAuthResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BFEAuthResponse::InitAsDefaultInstance() {
}

BFEAuthResponse::BFEAuthResponse(const BFEAuthResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BFEAuthResponse::SharedCtor() {
  _cached_size_ = 0;
  auth_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  experation_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BFEAuthResponse::~BFEAuthResponse() {
  SharedDtor();
}

void BFEAuthResponse::SharedDtor() {
  if (auth_token_ != &::google::protobuf::internal::kEmptyString) {
    delete auth_token_;
  }
  if (experation_time_ != &::google::protobuf::internal::kEmptyString) {
    delete experation_time_;
  }
  if (this != default_instance_) {
  }
}

void BFEAuthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BFEAuthResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BFEAuthResponse_descriptor_;
}

const BFEAuthResponse& BFEAuthResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BFEProtos_2eproto();  return *default_instance_;
}

BFEAuthResponse* BFEAuthResponse::default_instance_ = NULL;

BFEAuthResponse* BFEAuthResponse::New() const {
  return new BFEAuthResponse;
}

void BFEAuthResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_auth_token()) {
      if (auth_token_ != &::google::protobuf::internal::kEmptyString) {
        auth_token_->clear();
      }
    }
    if (has_experation_time()) {
      if (experation_time_ != &::google::protobuf::internal::kEmptyString) {
        experation_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BFEAuthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string auth_token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->auth_token().data(), this->auth_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_experation_time;
        break;
      }
      
      // optional string experation_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_experation_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_experation_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->experation_time().data(), this->experation_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BFEAuthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string auth_token = 1;
  if (has_auth_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth_token().data(), this->auth_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->auth_token(), output);
  }
  
  // optional string experation_time = 2;
  if (has_experation_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->experation_time().data(), this->experation_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->experation_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BFEAuthResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string auth_token = 1;
  if (has_auth_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth_token().data(), this->auth_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->auth_token(), target);
  }
  
  // optional string experation_time = 2;
  if (has_experation_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->experation_time().data(), this->experation_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->experation_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BFEAuthResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string auth_token = 1;
    if (has_auth_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth_token());
    }
    
    // optional string experation_time = 2;
    if (has_experation_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->experation_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BFEAuthResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BFEAuthResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BFEAuthResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BFEAuthResponse::MergeFrom(const BFEAuthResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_auth_token()) {
      set_auth_token(from.auth_token());
    }
    if (from.has_experation_time()) {
      set_experation_time(from.experation_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BFEAuthResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BFEAuthResponse::CopyFrom(const BFEAuthResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BFEAuthResponse::IsInitialized() const {
  
  return true;
}

void BFEAuthResponse::Swap(BFEAuthResponse* other) {
  if (other != this) {
    std::swap(auth_token_, other->auth_token_);
    std::swap(experation_time_, other->experation_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BFEAuthResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BFEAuthResponse_descriptor_;
  metadata.reflection = BFEAuthResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace BFEProtos
}  // namespace Thilenius

// @@protoc_insertion_point(global_scope)
