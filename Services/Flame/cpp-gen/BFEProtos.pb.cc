// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BFEProtos.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Thilenius {
namespace BFEProtos {

namespace {

const ::google::protobuf::Descriptor* BFEMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BFEMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* BFELoadLevelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BFELoadLevelRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BFELoadLevelRequest_LevelLoadMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BFELoadLevelResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BFELoadLevelResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BFESparkCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BFESparkCommand_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BFESparkCommand_CommandType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BFESparkResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BFESparkResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BFEProtos_2eproto() {
  protobuf_AddDesc_BFEProtos_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BFEProtos.proto");
  GOOGLE_CHECK(file != NULL);
  BFEMessage_descriptor_ = file->message_type(0);
  static const int BFEMessage_offsets_[1] = {
  };
  BFEMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BFEMessage_descriptor_,
      BFEMessage::default_instance_,
      BFEMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFEMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFEMessage, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFEMessage, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BFEMessage));
  BFELoadLevelRequest_descriptor_ = file->message_type(1);
  static const int BFELoadLevelRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFELoadLevelRequest, auth_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFELoadLevelRequest, levelnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFELoadLevelRequest, seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFELoadLevelRequest, level_load_mode_),
  };
  BFELoadLevelRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BFELoadLevelRequest_descriptor_,
      BFELoadLevelRequest::default_instance_,
      BFELoadLevelRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFELoadLevelRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFELoadLevelRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BFELoadLevelRequest));
  BFELoadLevelRequest_LevelLoadMode_descriptor_ = BFELoadLevelRequest_descriptor_->enum_type(0);
  BFELoadLevelResponse_descriptor_ = file->message_type(2);
  static const int BFELoadLevelResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFELoadLevelResponse, failure_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFELoadLevelResponse, spark_count_),
  };
  BFELoadLevelResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BFELoadLevelResponse_descriptor_,
      BFELoadLevelResponse::default_instance_,
      BFELoadLevelResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFELoadLevelResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFELoadLevelResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BFELoadLevelResponse));
  BFESparkCommand_descriptor_ = file->message_type(3);
  static const int BFESparkCommand_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFESparkCommand, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFESparkCommand, spark_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFESparkCommand, auth_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFESparkCommand, pipline_token_),
  };
  BFESparkCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BFESparkCommand_descriptor_,
      BFESparkCommand::default_instance_,
      BFESparkCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFESparkCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFESparkCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BFESparkCommand));
  BFESparkCommand_CommandType_descriptor_ = BFESparkCommand_descriptor_->enum_type(0);
  BFESparkResponse_descriptor_ = file->message_type(4);
  static const int BFESparkResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFESparkResponse, pipline_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFESparkResponse, failure_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFESparkResponse, response_bool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFESparkResponse, response_int_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFESparkResponse, response_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFESparkResponse, response_bytes_),
  };
  BFESparkResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BFESparkResponse_descriptor_,
      BFESparkResponse::default_instance_,
      BFESparkResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFESparkResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFESparkResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BFESparkResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BFEProtos_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BFEMessage_descriptor_, &BFEMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BFELoadLevelRequest_descriptor_, &BFELoadLevelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BFELoadLevelResponse_descriptor_, &BFELoadLevelResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BFESparkCommand_descriptor_, &BFESparkCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BFESparkResponse_descriptor_, &BFESparkResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BFEProtos_2eproto() {
  delete BFEMessage::default_instance_;
  delete BFEMessage_reflection_;
  delete BFELoadLevelRequest::default_instance_;
  delete BFELoadLevelRequest_reflection_;
  delete BFELoadLevelResponse::default_instance_;
  delete BFELoadLevelResponse_reflection_;
  delete BFESparkCommand::default_instance_;
  delete BFESparkCommand_reflection_;
  delete BFESparkResponse::default_instance_;
  delete BFESparkResponse_reflection_;
}

void protobuf_AddDesc_BFEProtos_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017BFEProtos.proto\022\023Thilenius.BFEProtos\"\026"
    "\n\nBFEMessage*\010\010d\020\200\200\200\200\002\"\274\002\n\023BFELoadLevelR"
    "equest\022\022\n\nauth_token\030\001 \002(\t\022\023\n\013levelNumbe"
    "r\030\002 \002(\005\022\014\n\004seed\030\003 \001(\005\022X\n\017level_load_mode"
    "\030\004 \001(\01626.Thilenius.BFEProtos.BFELoadLeve"
    "lRequest.LevelLoadMode:\007DEFAULT\"(\n\rLevel"
    "LoadMode\022\013\n\007DEFAULT\020\000\022\n\n\006SUBMIT\020\0012j\n\027BFE"
    "LoadLevelRequest_ext\022\037.Thilenius.BFEProt"
    "os.BFEMessage\030d \001(\0132(.Thilenius.BFEProto"
    "s.BFELoadLevelRequest\"\261\001\n\024BFELoadLevelRe"
    "sponse\022\026\n\016failure_reason\030\001 \001(\t\022\023\n\013spark_"
    "count\030\002 \001(\0052l\n\030BFELoadLevelResponse_ext\022"
    "\037.Thilenius.BFEProtos.BFEMessage\030e \001(\0132)"
    ".Thilenius.BFEProtos.BFELoadLevelRespons"
    "e\"\344\002\n\017BFESparkCommand\022A\n\007command\030\001 \002(\01620"
    ".Thilenius.BFEProtos.BFESparkCommand.Com"
    "mandType\022\020\n\010spark_id\030\002 \002(\005\022\022\n\nauth_token"
    "\030\003 \002(\t\022\025\n\rpipline_token\030\004 \001(\t\"m\n\013Command"
    "Type\022\020\n\014MOVE_FORWARD\020\000\022\021\n\rMOVE_BACKWARD\020"
    "\001\022\013\n\007MOVE_UP\020\002\022\r\n\tMOVE_DOWN\020\003\022\r\n\tTURN_LE"
    "FT\020\004\022\016\n\nTURN_RIGHT\020\0052b\n\023BFESparkCommand_"
    "ext\022\037.Thilenius.BFEProtos.BFEMessage\030f \001"
    "(\0132$.Thilenius.BFEProtos.BFESparkCommand"
    "\"\204\002\n\020BFESparkResponse\022\025\n\rpipline_token\030\001"
    " \001(\t\022\026\n\016failure_reason\030\002 \001(\t\022\025\n\rresponse"
    "_bool\030\003 \001(\010\022\024\n\014response_int\030\004 \001(\005\022\026\n\016res"
    "ponse_float\030\005 \001(\002\022\026\n\016response_bytes\030\006 \001("
    "\0142d\n\024BFESparkResponse_ext\022\037.Thilenius.BF"
    "EProtos.BFEMessage\030g \001(\0132%.Thilenius.BFE"
    "Protos.BFESparkResponseB0\n#com.thilenius"
    ".blaze.frontend.protosB\tBFEProtos", 1233);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BFEProtos.proto", &protobuf_RegisterTypes);
  BFEMessage::default_instance_ = new BFEMessage();
  BFELoadLevelRequest::default_instance_ = new BFELoadLevelRequest();
  BFELoadLevelResponse::default_instance_ = new BFELoadLevelResponse();
  BFESparkCommand::default_instance_ = new BFESparkCommand();
  BFESparkResponse::default_instance_ = new BFESparkResponse();
  BFEMessage::default_instance_->InitAsDefaultInstance();
  BFELoadLevelRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::Thilenius::BFEProtos::BFEMessage::default_instance(),
    100, 11, false, false,
    &::Thilenius::BFEProtos::BFELoadLevelRequest::default_instance());
  BFELoadLevelResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::Thilenius::BFEProtos::BFEMessage::default_instance(),
    101, 11, false, false,
    &::Thilenius::BFEProtos::BFELoadLevelResponse::default_instance());
  BFESparkCommand::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::Thilenius::BFEProtos::BFEMessage::default_instance(),
    102, 11, false, false,
    &::Thilenius::BFEProtos::BFESparkCommand::default_instance());
  BFESparkResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::Thilenius::BFEProtos::BFEMessage::default_instance(),
    103, 11, false, false,
    &::Thilenius::BFEProtos::BFESparkResponse::default_instance());
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BFEProtos_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BFEProtos_2eproto {
  StaticDescriptorInitializer_BFEProtos_2eproto() {
    protobuf_AddDesc_BFEProtos_2eproto();
  }
} static_descriptor_initializer_BFEProtos_2eproto_;


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BFEMessage::BFEMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BFEMessage::InitAsDefaultInstance() {
}

BFEMessage::BFEMessage(const BFEMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BFEMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BFEMessage::~BFEMessage() {
  SharedDtor();
}

void BFEMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BFEMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BFEMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BFEMessage_descriptor_;
}

const BFEMessage& BFEMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BFEProtos_2eproto();  return *default_instance_;
}

BFEMessage* BFEMessage::default_instance_ = NULL;

BFEMessage* BFEMessage::New() const {
  return new BFEMessage;
}

void BFEMessage::Clear() {
  _extensions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BFEMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    if ((800u <= tag)) {
      DO_(_extensions_.ParseField(tag, input, default_instance_,
                                  mutable_unknown_fields()));
      continue;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void BFEMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BFEMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BFEMessage::ByteSize() const {
  int total_size = 0;
  
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BFEMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BFEMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BFEMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BFEMessage::MergeFrom(const BFEMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BFEMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BFEMessage::CopyFrom(const BFEMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BFEMessage::IsInitialized() const {
  
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BFEMessage::Swap(BFEMessage* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BFEMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BFEMessage_descriptor_;
  metadata.reflection = BFEMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BFELoadLevelRequest_LevelLoadMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BFELoadLevelRequest_LevelLoadMode_descriptor_;
}
bool BFELoadLevelRequest_LevelLoadMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BFELoadLevelRequest_LevelLoadMode BFELoadLevelRequest::DEFAULT;
const BFELoadLevelRequest_LevelLoadMode BFELoadLevelRequest::SUBMIT;
const BFELoadLevelRequest_LevelLoadMode BFELoadLevelRequest::LevelLoadMode_MIN;
const BFELoadLevelRequest_LevelLoadMode BFELoadLevelRequest::LevelLoadMode_MAX;
const int BFELoadLevelRequest::LevelLoadMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BFELoadLevelRequest::kAuthTokenFieldNumber;
const int BFELoadLevelRequest::kLevelNumberFieldNumber;
const int BFELoadLevelRequest::kSeedFieldNumber;
const int BFELoadLevelRequest::kLevelLoadModeFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int BFELoadLevelRequest::kBFELoadLevelRequestExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::Thilenius::BFEProtos::BFEMessage,
    ::google::protobuf::internal::MessageTypeTraits< ::Thilenius::BFEProtos::BFELoadLevelRequest >, 11, false >
  BFELoadLevelRequest::BFELoadLevelRequest_ext(kBFELoadLevelRequestExtFieldNumber, ::Thilenius::BFEProtos::BFELoadLevelRequest::default_instance());
BFELoadLevelRequest::BFELoadLevelRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BFELoadLevelRequest::InitAsDefaultInstance() {
}

BFELoadLevelRequest::BFELoadLevelRequest(const BFELoadLevelRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BFELoadLevelRequest::SharedCtor() {
  _cached_size_ = 0;
  auth_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  levelnumber_ = 0;
  seed_ = 0;
  level_load_mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BFELoadLevelRequest::~BFELoadLevelRequest() {
  SharedDtor();
}

void BFELoadLevelRequest::SharedDtor() {
  if (auth_token_ != &::google::protobuf::internal::kEmptyString) {
    delete auth_token_;
  }
  if (this != default_instance_) {
  }
}

void BFELoadLevelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BFELoadLevelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BFELoadLevelRequest_descriptor_;
}

const BFELoadLevelRequest& BFELoadLevelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BFEProtos_2eproto();  return *default_instance_;
}

BFELoadLevelRequest* BFELoadLevelRequest::default_instance_ = NULL;

BFELoadLevelRequest* BFELoadLevelRequest::New() const {
  return new BFELoadLevelRequest;
}

void BFELoadLevelRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_auth_token()) {
      if (auth_token_ != &::google::protobuf::internal::kEmptyString) {
        auth_token_->clear();
      }
    }
    levelnumber_ = 0;
    seed_ = 0;
    level_load_mode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BFELoadLevelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string auth_token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->auth_token().data(), this->auth_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_levelNumber;
        break;
      }
      
      // required int32 levelNumber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelnumber_)));
          set_has_levelnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seed;
        break;
      }
      
      // optional int32 seed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seed_)));
          set_has_seed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level_load_mode;
        break;
      }
      
      // optional .Thilenius.BFEProtos.BFELoadLevelRequest.LevelLoadMode level_load_mode = 4 [default = DEFAULT];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_load_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Thilenius::BFEProtos::BFELoadLevelRequest_LevelLoadMode_IsValid(value)) {
            set_level_load_mode(static_cast< ::Thilenius::BFEProtos::BFELoadLevelRequest_LevelLoadMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BFELoadLevelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string auth_token = 1;
  if (has_auth_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth_token().data(), this->auth_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->auth_token(), output);
  }
  
  // required int32 levelNumber = 2;
  if (has_levelnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->levelnumber(), output);
  }
  
  // optional int32 seed = 3;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seed(), output);
  }
  
  // optional .Thilenius.BFEProtos.BFELoadLevelRequest.LevelLoadMode level_load_mode = 4 [default = DEFAULT];
  if (has_level_load_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->level_load_mode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BFELoadLevelRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string auth_token = 1;
  if (has_auth_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth_token().data(), this->auth_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->auth_token(), target);
  }
  
  // required int32 levelNumber = 2;
  if (has_levelnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->levelnumber(), target);
  }
  
  // optional int32 seed = 3;
  if (has_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seed(), target);
  }
  
  // optional .Thilenius.BFEProtos.BFELoadLevelRequest.LevelLoadMode level_load_mode = 4 [default = DEFAULT];
  if (has_level_load_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->level_load_mode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BFELoadLevelRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string auth_token = 1;
    if (has_auth_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth_token());
    }
    
    // required int32 levelNumber = 2;
    if (has_levelnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelnumber());
    }
    
    // optional int32 seed = 3;
    if (has_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seed());
    }
    
    // optional .Thilenius.BFEProtos.BFELoadLevelRequest.LevelLoadMode level_load_mode = 4 [default = DEFAULT];
    if (has_level_load_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->level_load_mode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BFELoadLevelRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BFELoadLevelRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BFELoadLevelRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BFELoadLevelRequest::MergeFrom(const BFELoadLevelRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_auth_token()) {
      set_auth_token(from.auth_token());
    }
    if (from.has_levelnumber()) {
      set_levelnumber(from.levelnumber());
    }
    if (from.has_seed()) {
      set_seed(from.seed());
    }
    if (from.has_level_load_mode()) {
      set_level_load_mode(from.level_load_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BFELoadLevelRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BFELoadLevelRequest::CopyFrom(const BFELoadLevelRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BFELoadLevelRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void BFELoadLevelRequest::Swap(BFELoadLevelRequest* other) {
  if (other != this) {
    std::swap(auth_token_, other->auth_token_);
    std::swap(levelnumber_, other->levelnumber_);
    std::swap(seed_, other->seed_);
    std::swap(level_load_mode_, other->level_load_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BFELoadLevelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BFELoadLevelRequest_descriptor_;
  metadata.reflection = BFELoadLevelRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BFELoadLevelResponse::kFailureReasonFieldNumber;
const int BFELoadLevelResponse::kSparkCountFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int BFELoadLevelResponse::kBFELoadLevelResponseExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::Thilenius::BFEProtos::BFEMessage,
    ::google::protobuf::internal::MessageTypeTraits< ::Thilenius::BFEProtos::BFELoadLevelResponse >, 11, false >
  BFELoadLevelResponse::BFELoadLevelResponse_ext(kBFELoadLevelResponseExtFieldNumber, ::Thilenius::BFEProtos::BFELoadLevelResponse::default_instance());
BFELoadLevelResponse::BFELoadLevelResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BFELoadLevelResponse::InitAsDefaultInstance() {
}

BFELoadLevelResponse::BFELoadLevelResponse(const BFELoadLevelResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BFELoadLevelResponse::SharedCtor() {
  _cached_size_ = 0;
  failure_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  spark_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BFELoadLevelResponse::~BFELoadLevelResponse() {
  SharedDtor();
}

void BFELoadLevelResponse::SharedDtor() {
  if (failure_reason_ != &::google::protobuf::internal::kEmptyString) {
    delete failure_reason_;
  }
  if (this != default_instance_) {
  }
}

void BFELoadLevelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BFELoadLevelResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BFELoadLevelResponse_descriptor_;
}

const BFELoadLevelResponse& BFELoadLevelResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BFEProtos_2eproto();  return *default_instance_;
}

BFELoadLevelResponse* BFELoadLevelResponse::default_instance_ = NULL;

BFELoadLevelResponse* BFELoadLevelResponse::New() const {
  return new BFELoadLevelResponse;
}

void BFELoadLevelResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_failure_reason()) {
      if (failure_reason_ != &::google::protobuf::internal::kEmptyString) {
        failure_reason_->clear();
      }
    }
    spark_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BFELoadLevelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string failure_reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failure_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->failure_reason().data(), this->failure_reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_spark_count;
        break;
      }
      
      // optional int32 spark_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spark_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spark_count_)));
          set_has_spark_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BFELoadLevelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string failure_reason = 1;
  if (has_failure_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->failure_reason().data(), this->failure_reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->failure_reason(), output);
  }
  
  // optional int32 spark_count = 2;
  if (has_spark_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->spark_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BFELoadLevelResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string failure_reason = 1;
  if (has_failure_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->failure_reason().data(), this->failure_reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->failure_reason(), target);
  }
  
  // optional int32 spark_count = 2;
  if (has_spark_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->spark_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BFELoadLevelResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string failure_reason = 1;
    if (has_failure_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failure_reason());
    }
    
    // optional int32 spark_count = 2;
    if (has_spark_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spark_count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BFELoadLevelResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BFELoadLevelResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BFELoadLevelResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BFELoadLevelResponse::MergeFrom(const BFELoadLevelResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_failure_reason()) {
      set_failure_reason(from.failure_reason());
    }
    if (from.has_spark_count()) {
      set_spark_count(from.spark_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BFELoadLevelResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BFELoadLevelResponse::CopyFrom(const BFELoadLevelResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BFELoadLevelResponse::IsInitialized() const {
  
  return true;
}

void BFELoadLevelResponse::Swap(BFELoadLevelResponse* other) {
  if (other != this) {
    std::swap(failure_reason_, other->failure_reason_);
    std::swap(spark_count_, other->spark_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BFELoadLevelResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BFELoadLevelResponse_descriptor_;
  metadata.reflection = BFELoadLevelResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BFESparkCommand_CommandType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BFESparkCommand_CommandType_descriptor_;
}
bool BFESparkCommand_CommandType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BFESparkCommand_CommandType BFESparkCommand::MOVE_FORWARD;
const BFESparkCommand_CommandType BFESparkCommand::MOVE_BACKWARD;
const BFESparkCommand_CommandType BFESparkCommand::MOVE_UP;
const BFESparkCommand_CommandType BFESparkCommand::MOVE_DOWN;
const BFESparkCommand_CommandType BFESparkCommand::TURN_LEFT;
const BFESparkCommand_CommandType BFESparkCommand::TURN_RIGHT;
const BFESparkCommand_CommandType BFESparkCommand::CommandType_MIN;
const BFESparkCommand_CommandType BFESparkCommand::CommandType_MAX;
const int BFESparkCommand::CommandType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BFESparkCommand::kCommandFieldNumber;
const int BFESparkCommand::kSparkIdFieldNumber;
const int BFESparkCommand::kAuthTokenFieldNumber;
const int BFESparkCommand::kPiplineTokenFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int BFESparkCommand::kBFESparkCommandExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::Thilenius::BFEProtos::BFEMessage,
    ::google::protobuf::internal::MessageTypeTraits< ::Thilenius::BFEProtos::BFESparkCommand >, 11, false >
  BFESparkCommand::BFESparkCommand_ext(kBFESparkCommandExtFieldNumber, ::Thilenius::BFEProtos::BFESparkCommand::default_instance());
BFESparkCommand::BFESparkCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BFESparkCommand::InitAsDefaultInstance() {
}

BFESparkCommand::BFESparkCommand(const BFESparkCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BFESparkCommand::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0;
  spark_id_ = 0;
  auth_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pipline_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BFESparkCommand::~BFESparkCommand() {
  SharedDtor();
}

void BFESparkCommand::SharedDtor() {
  if (auth_token_ != &::google::protobuf::internal::kEmptyString) {
    delete auth_token_;
  }
  if (pipline_token_ != &::google::protobuf::internal::kEmptyString) {
    delete pipline_token_;
  }
  if (this != default_instance_) {
  }
}

void BFESparkCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BFESparkCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BFESparkCommand_descriptor_;
}

const BFESparkCommand& BFESparkCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BFEProtos_2eproto();  return *default_instance_;
}

BFESparkCommand* BFESparkCommand::default_instance_ = NULL;

BFESparkCommand* BFESparkCommand::New() const {
  return new BFESparkCommand;
}

void BFESparkCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 0;
    spark_id_ = 0;
    if (has_auth_token()) {
      if (auth_token_ != &::google::protobuf::internal::kEmptyString) {
        auth_token_->clear();
      }
    }
    if (has_pipline_token()) {
      if (pipline_token_ != &::google::protobuf::internal::kEmptyString) {
        pipline_token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BFESparkCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Thilenius.BFEProtos.BFESparkCommand.CommandType command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Thilenius::BFEProtos::BFESparkCommand_CommandType_IsValid(value)) {
            set_command(static_cast< ::Thilenius::BFEProtos::BFESparkCommand_CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_spark_id;
        break;
      }
      
      // required int32 spark_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spark_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spark_id_)));
          set_has_spark_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_auth_token;
        break;
      }
      
      // required string auth_token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_auth_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->auth_token().data(), this->auth_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pipline_token;
        break;
      }
      
      // optional string pipline_token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pipline_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pipline_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pipline_token().data(), this->pipline_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BFESparkCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Thilenius.BFEProtos.BFESparkCommand.CommandType command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command(), output);
  }
  
  // required int32 spark_id = 2;
  if (has_spark_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->spark_id(), output);
  }
  
  // required string auth_token = 3;
  if (has_auth_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth_token().data(), this->auth_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->auth_token(), output);
  }
  
  // optional string pipline_token = 4;
  if (has_pipline_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pipline_token().data(), this->pipline_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pipline_token(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BFESparkCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Thilenius.BFEProtos.BFESparkCommand.CommandType command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->command(), target);
  }
  
  // required int32 spark_id = 2;
  if (has_spark_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->spark_id(), target);
  }
  
  // required string auth_token = 3;
  if (has_auth_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth_token().data(), this->auth_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->auth_token(), target);
  }
  
  // optional string pipline_token = 4;
  if (has_pipline_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pipline_token().data(), this->pipline_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pipline_token(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BFESparkCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Thilenius.BFEProtos.BFESparkCommand.CommandType command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
    }
    
    // required int32 spark_id = 2;
    if (has_spark_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spark_id());
    }
    
    // required string auth_token = 3;
    if (has_auth_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth_token());
    }
    
    // optional string pipline_token = 4;
    if (has_pipline_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pipline_token());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BFESparkCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BFESparkCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BFESparkCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BFESparkCommand::MergeFrom(const BFESparkCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_spark_id()) {
      set_spark_id(from.spark_id());
    }
    if (from.has_auth_token()) {
      set_auth_token(from.auth_token());
    }
    if (from.has_pipline_token()) {
      set_pipline_token(from.pipline_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BFESparkCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BFESparkCommand::CopyFrom(const BFESparkCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BFESparkCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void BFESparkCommand::Swap(BFESparkCommand* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(spark_id_, other->spark_id_);
    std::swap(auth_token_, other->auth_token_);
    std::swap(pipline_token_, other->pipline_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BFESparkCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BFESparkCommand_descriptor_;
  metadata.reflection = BFESparkCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BFESparkResponse::kPiplineTokenFieldNumber;
const int BFESparkResponse::kFailureReasonFieldNumber;
const int BFESparkResponse::kResponseBoolFieldNumber;
const int BFESparkResponse::kResponseIntFieldNumber;
const int BFESparkResponse::kResponseFloatFieldNumber;
const int BFESparkResponse::kResponseBytesFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int BFESparkResponse::kBFESparkResponseExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::Thilenius::BFEProtos::BFEMessage,
    ::google::protobuf::internal::MessageTypeTraits< ::Thilenius::BFEProtos::BFESparkResponse >, 11, false >
  BFESparkResponse::BFESparkResponse_ext(kBFESparkResponseExtFieldNumber, ::Thilenius::BFEProtos::BFESparkResponse::default_instance());
BFESparkResponse::BFESparkResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BFESparkResponse::InitAsDefaultInstance() {
}

BFESparkResponse::BFESparkResponse(const BFESparkResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BFESparkResponse::SharedCtor() {
  _cached_size_ = 0;
  pipline_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  failure_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  response_bool_ = false;
  response_int_ = 0;
  response_float_ = 0;
  response_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BFESparkResponse::~BFESparkResponse() {
  SharedDtor();
}

void BFESparkResponse::SharedDtor() {
  if (pipline_token_ != &::google::protobuf::internal::kEmptyString) {
    delete pipline_token_;
  }
  if (failure_reason_ != &::google::protobuf::internal::kEmptyString) {
    delete failure_reason_;
  }
  if (response_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete response_bytes_;
  }
  if (this != default_instance_) {
  }
}

void BFESparkResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BFESparkResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BFESparkResponse_descriptor_;
}

const BFESparkResponse& BFESparkResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BFEProtos_2eproto();  return *default_instance_;
}

BFESparkResponse* BFESparkResponse::default_instance_ = NULL;

BFESparkResponse* BFESparkResponse::New() const {
  return new BFESparkResponse;
}

void BFESparkResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pipline_token()) {
      if (pipline_token_ != &::google::protobuf::internal::kEmptyString) {
        pipline_token_->clear();
      }
    }
    if (has_failure_reason()) {
      if (failure_reason_ != &::google::protobuf::internal::kEmptyString) {
        failure_reason_->clear();
      }
    }
    response_bool_ = false;
    response_int_ = 0;
    response_float_ = 0;
    if (has_response_bytes()) {
      if (response_bytes_ != &::google::protobuf::internal::kEmptyString) {
        response_bytes_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BFESparkResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pipline_token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pipline_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pipline_token().data(), this->pipline_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_failure_reason;
        break;
      }
      
      // optional string failure_reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_failure_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failure_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->failure_reason().data(), this->failure_reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_response_bool;
        break;
      }
      
      // optional bool response_bool = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_response_bool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &response_bool_)));
          set_has_response_bool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_response_int;
        break;
      }
      
      // optional int32 response_int = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_response_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_int_)));
          set_has_response_int();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_response_float;
        break;
      }
      
      // optional float response_float = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_response_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &response_float_)));
          set_has_response_float();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_response_bytes;
        break;
      }
      
      // optional bytes response_bytes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_response_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BFESparkResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string pipline_token = 1;
  if (has_pipline_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pipline_token().data(), this->pipline_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pipline_token(), output);
  }
  
  // optional string failure_reason = 2;
  if (has_failure_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->failure_reason().data(), this->failure_reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->failure_reason(), output);
  }
  
  // optional bool response_bool = 3;
  if (has_response_bool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->response_bool(), output);
  }
  
  // optional int32 response_int = 4;
  if (has_response_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->response_int(), output);
  }
  
  // optional float response_float = 5;
  if (has_response_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->response_float(), output);
  }
  
  // optional bytes response_bytes = 6;
  if (has_response_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->response_bytes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BFESparkResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string pipline_token = 1;
  if (has_pipline_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pipline_token().data(), this->pipline_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pipline_token(), target);
  }
  
  // optional string failure_reason = 2;
  if (has_failure_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->failure_reason().data(), this->failure_reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->failure_reason(), target);
  }
  
  // optional bool response_bool = 3;
  if (has_response_bool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->response_bool(), target);
  }
  
  // optional int32 response_int = 4;
  if (has_response_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->response_int(), target);
  }
  
  // optional float response_float = 5;
  if (has_response_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->response_float(), target);
  }
  
  // optional bytes response_bytes = 6;
  if (has_response_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->response_bytes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BFESparkResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string pipline_token = 1;
    if (has_pipline_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pipline_token());
    }
    
    // optional string failure_reason = 2;
    if (has_failure_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failure_reason());
    }
    
    // optional bool response_bool = 3;
    if (has_response_bool()) {
      total_size += 1 + 1;
    }
    
    // optional int32 response_int = 4;
    if (has_response_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->response_int());
    }
    
    // optional float response_float = 5;
    if (has_response_float()) {
      total_size += 1 + 4;
    }
    
    // optional bytes response_bytes = 6;
    if (has_response_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->response_bytes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BFESparkResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BFESparkResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BFESparkResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BFESparkResponse::MergeFrom(const BFESparkResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pipline_token()) {
      set_pipline_token(from.pipline_token());
    }
    if (from.has_failure_reason()) {
      set_failure_reason(from.failure_reason());
    }
    if (from.has_response_bool()) {
      set_response_bool(from.response_bool());
    }
    if (from.has_response_int()) {
      set_response_int(from.response_int());
    }
    if (from.has_response_float()) {
      set_response_float(from.response_float());
    }
    if (from.has_response_bytes()) {
      set_response_bytes(from.response_bytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BFESparkResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BFESparkResponse::CopyFrom(const BFESparkResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BFESparkResponse::IsInitialized() const {
  
  return true;
}

void BFESparkResponse::Swap(BFESparkResponse* other) {
  if (other != this) {
    std::swap(pipline_token_, other->pipline_token_);
    std::swap(failure_reason_, other->failure_reason_);
    std::swap(response_bool_, other->response_bool_);
    std::swap(response_int_, other->response_int_);
    std::swap(response_float_, other->response_float_);
    std::swap(response_bytes_, other->response_bytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BFESparkResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BFESparkResponse_descriptor_;
  metadata.reflection = BFESparkResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace BFEProtos
}  // namespace Thilenius

// @@protoc_insertion_point(global_scope)
