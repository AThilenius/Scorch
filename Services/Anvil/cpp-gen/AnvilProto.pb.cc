// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AnvilProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace Thilenius {
namespace AnvilProtos {

void protobuf_ShutdownFile_AnvilProto_2eproto() {
  delete AnvilConfig::default_instance_;
}

void protobuf_AddDesc_AnvilProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  AnvilConfig::default_instance_ = new AnvilConfig();
  AnvilConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AnvilProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AnvilProto_2eproto {
  StaticDescriptorInitializer_AnvilProto_2eproto() {
    protobuf_AddDesc_AnvilProto_2eproto();
  }
} static_descriptor_initializer_AnvilProto_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int AnvilConfig::kAuthTokenFieldNumber;
const int AnvilConfig::kBlazeIpFieldNumber;
const int AnvilConfig::kBlazePortFieldNumber;
#endif  // !_MSC_VER

AnvilConfig::AnvilConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AnvilConfig::InitAsDefaultInstance() {
}

AnvilConfig::AnvilConfig(const AnvilConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AnvilConfig::SharedCtor() {
  _cached_size_ = 0;
  auth_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  blaze_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  blaze_port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnvilConfig::~AnvilConfig() {
  SharedDtor();
}

void AnvilConfig::SharedDtor() {
  if (auth_token_ != &::google::protobuf::internal::kEmptyString) {
    delete auth_token_;
  }
  if (blaze_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete blaze_ip_;
  }
  if (this != default_instance_) {
  }
}

void AnvilConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AnvilConfig& AnvilConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AnvilProto_2eproto();  return *default_instance_;
}

AnvilConfig* AnvilConfig::default_instance_ = NULL;

AnvilConfig* AnvilConfig::New() const {
  return new AnvilConfig;
}

void AnvilConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_auth_token()) {
      if (auth_token_ != &::google::protobuf::internal::kEmptyString) {
        auth_token_->clear();
      }
    }
    if (has_blaze_ip()) {
      if (blaze_ip_ != &::google::protobuf::internal::kEmptyString) {
        blaze_ip_->clear();
      }
    }
    blaze_port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AnvilConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string auth_token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_blaze_ip;
        break;
      }
      
      // optional string blaze_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blaze_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blaze_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_blaze_port;
        break;
      }
      
      // optional int32 blaze_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blaze_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blaze_port_)));
          set_has_blaze_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnvilConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string auth_token = 1;
  if (has_auth_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->auth_token(), output);
  }
  
  // optional string blaze_ip = 2;
  if (has_blaze_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->blaze_ip(), output);
  }
  
  // optional int32 blaze_port = 3;
  if (has_blaze_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->blaze_port(), output);
  }
  
}

int AnvilConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string auth_token = 1;
    if (has_auth_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth_token());
    }
    
    // optional string blaze_ip = 2;
    if (has_blaze_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blaze_ip());
    }
    
    // optional int32 blaze_port = 3;
    if (has_blaze_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blaze_port());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnvilConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AnvilConfig*>(&from));
}

void AnvilConfig::MergeFrom(const AnvilConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_auth_token()) {
      set_auth_token(from.auth_token());
    }
    if (from.has_blaze_ip()) {
      set_blaze_ip(from.blaze_ip());
    }
    if (from.has_blaze_port()) {
      set_blaze_port(from.blaze_port());
    }
  }
}

void AnvilConfig::CopyFrom(const AnvilConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnvilConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AnvilConfig::Swap(AnvilConfig* other) {
  if (other != this) {
    std::swap(auth_token_, other->auth_token_);
    std::swap(blaze_ip_, other->blaze_ip_);
    std::swap(blaze_port_, other->blaze_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AnvilConfig::GetTypeName() const {
  return "Thilenius.AnvilProtos.AnvilConfig";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AnvilProtos
}  // namespace Thilenius

// @@protoc_insertion_point(global_scope)
