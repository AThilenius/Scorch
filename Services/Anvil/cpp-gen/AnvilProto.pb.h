// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AnvilProto.proto

#ifndef PROTOBUF_AnvilProto_2eproto__INCLUDED
#define PROTOBUF_AnvilProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace Thilenius {
namespace AnvilProtos {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AnvilProto_2eproto();
void protobuf_AssignDesc_AnvilProto_2eproto();
void protobuf_ShutdownFile_AnvilProto_2eproto();

class AnvilConfig;

// ===================================================================

class AnvilConfig : public ::google::protobuf::MessageLite {
 public:
  AnvilConfig();
  virtual ~AnvilConfig();
  
  AnvilConfig(const AnvilConfig& from);
  
  inline AnvilConfig& operator=(const AnvilConfig& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const AnvilConfig& default_instance();
  
  void Swap(AnvilConfig* other);
  
  // implements Message ----------------------------------------------
  
  AnvilConfig* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AnvilConfig& from);
  void MergeFrom(const AnvilConfig& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string auth_token = 1;
  inline bool has_auth_token() const;
  inline void clear_auth_token();
  static const int kAuthTokenFieldNumber = 1;
  inline const ::std::string& auth_token() const;
  inline void set_auth_token(const ::std::string& value);
  inline void set_auth_token(const char* value);
  inline void set_auth_token(const char* value, size_t size);
  inline ::std::string* mutable_auth_token();
  inline ::std::string* release_auth_token();
  
  // optional string blaze_ip = 2;
  inline bool has_blaze_ip() const;
  inline void clear_blaze_ip();
  static const int kBlazeIpFieldNumber = 2;
  inline const ::std::string& blaze_ip() const;
  inline void set_blaze_ip(const ::std::string& value);
  inline void set_blaze_ip(const char* value);
  inline void set_blaze_ip(const char* value, size_t size);
  inline ::std::string* mutable_blaze_ip();
  inline ::std::string* release_blaze_ip();
  
  // optional int32 blaze_port = 3;
  inline bool has_blaze_port() const;
  inline void clear_blaze_port();
  static const int kBlazePortFieldNumber = 3;
  inline ::google::protobuf::int32 blaze_port() const;
  inline void set_blaze_port(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Thilenius.AnvilProtos.AnvilConfig)
 private:
  inline void set_has_auth_token();
  inline void clear_has_auth_token();
  inline void set_has_blaze_ip();
  inline void clear_has_blaze_ip();
  inline void set_has_blaze_port();
  inline void clear_has_blaze_port();
  
  ::std::string* auth_token_;
  ::std::string* blaze_ip_;
  ::google::protobuf::int32 blaze_port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_AnvilProto_2eproto();
  friend void protobuf_AssignDesc_AnvilProto_2eproto();
  friend void protobuf_ShutdownFile_AnvilProto_2eproto();
  
  void InitAsDefaultInstance();
  static AnvilConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// AnvilConfig

// required string auth_token = 1;
inline bool AnvilConfig::has_auth_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnvilConfig::set_has_auth_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnvilConfig::clear_has_auth_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnvilConfig::clear_auth_token() {
  if (auth_token_ != &::google::protobuf::internal::kEmptyString) {
    auth_token_->clear();
  }
  clear_has_auth_token();
}
inline const ::std::string& AnvilConfig::auth_token() const {
  return *auth_token_;
}
inline void AnvilConfig::set_auth_token(const ::std::string& value) {
  set_has_auth_token();
  if (auth_token_ == &::google::protobuf::internal::kEmptyString) {
    auth_token_ = new ::std::string;
  }
  auth_token_->assign(value);
}
inline void AnvilConfig::set_auth_token(const char* value) {
  set_has_auth_token();
  if (auth_token_ == &::google::protobuf::internal::kEmptyString) {
    auth_token_ = new ::std::string;
  }
  auth_token_->assign(value);
}
inline void AnvilConfig::set_auth_token(const char* value, size_t size) {
  set_has_auth_token();
  if (auth_token_ == &::google::protobuf::internal::kEmptyString) {
    auth_token_ = new ::std::string;
  }
  auth_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AnvilConfig::mutable_auth_token() {
  set_has_auth_token();
  if (auth_token_ == &::google::protobuf::internal::kEmptyString) {
    auth_token_ = new ::std::string;
  }
  return auth_token_;
}
inline ::std::string* AnvilConfig::release_auth_token() {
  clear_has_auth_token();
  if (auth_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = auth_token_;
    auth_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string blaze_ip = 2;
inline bool AnvilConfig::has_blaze_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnvilConfig::set_has_blaze_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnvilConfig::clear_has_blaze_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnvilConfig::clear_blaze_ip() {
  if (blaze_ip_ != &::google::protobuf::internal::kEmptyString) {
    blaze_ip_->clear();
  }
  clear_has_blaze_ip();
}
inline const ::std::string& AnvilConfig::blaze_ip() const {
  return *blaze_ip_;
}
inline void AnvilConfig::set_blaze_ip(const ::std::string& value) {
  set_has_blaze_ip();
  if (blaze_ip_ == &::google::protobuf::internal::kEmptyString) {
    blaze_ip_ = new ::std::string;
  }
  blaze_ip_->assign(value);
}
inline void AnvilConfig::set_blaze_ip(const char* value) {
  set_has_blaze_ip();
  if (blaze_ip_ == &::google::protobuf::internal::kEmptyString) {
    blaze_ip_ = new ::std::string;
  }
  blaze_ip_->assign(value);
}
inline void AnvilConfig::set_blaze_ip(const char* value, size_t size) {
  set_has_blaze_ip();
  if (blaze_ip_ == &::google::protobuf::internal::kEmptyString) {
    blaze_ip_ = new ::std::string;
  }
  blaze_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AnvilConfig::mutable_blaze_ip() {
  set_has_blaze_ip();
  if (blaze_ip_ == &::google::protobuf::internal::kEmptyString) {
    blaze_ip_ = new ::std::string;
  }
  return blaze_ip_;
}
inline ::std::string* AnvilConfig::release_blaze_ip() {
  clear_has_blaze_ip();
  if (blaze_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = blaze_ip_;
    blaze_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 blaze_port = 3;
inline bool AnvilConfig::has_blaze_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AnvilConfig::set_has_blaze_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AnvilConfig::clear_has_blaze_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AnvilConfig::clear_blaze_port() {
  blaze_port_ = 0;
  clear_has_blaze_port();
}
inline ::google::protobuf::int32 AnvilConfig::blaze_port() const {
  return blaze_port_;
}
inline void AnvilConfig::set_blaze_port(::google::protobuf::int32 value) {
  set_has_blaze_port();
  blaze_port_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AnvilProtos
}  // namespace Thilenius

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AnvilProto_2eproto__INCLUDED
