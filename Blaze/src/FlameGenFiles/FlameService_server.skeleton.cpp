// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "FlameService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::Flame;

class FlameServiceHandler : virtual public FlameServiceIf {
 public:
  FlameServiceHandler() {
    // Your initialization goes here
  }

  void CreateSpark(Spark& _return, const Location& worldLocation) {
    // Your implementation goes here
    printf("CreateSpark\n");
  }

  void GetAllSparks(std::vector<Spark> & _return) {
    // Your implementation goes here
    printf("GetAllSparks\n");
  }

  void RemoveSpark(const Spark& sparkToRemove) {
    // Your implementation goes here
    printf("RemoveSpark\n");
  }

  void RemoveAllSparks() {
    // Your implementation goes here
    printf("RemoveAllSparks\n");
  }

  bool DispatchMovementCommand(const Spark& spark, const MovementTypes::type movementCommand) {
    // Your implementation goes here
    printf("DispatchMovementCommand\n");
  }

  void DispatchOrientationCommand(const Spark& spark, const OrientationTypes::type orientationCommand) {
    // Your implementation goes here
    printf("DispatchOrientationCommand\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<FlameServiceHandler> handler(new FlameServiceHandler());
  shared_ptr<TProcessor> processor(new FlameServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

