/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Flame_TYPES_H
#define Flame_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace Flame {

struct MovementTypes {
  enum type {
    Forward = 1,
    Backward = 2,
    Up = 3,
    Down = 4
  };
};

extern const std::map<int, const char*> _MovementTypes_VALUES_TO_NAMES;

struct OrientationTypes {
  enum type {
    TurnLeft = 1,
    TurnRight = 2
  };
};

extern const std::map<int, const char*> _OrientationTypes_VALUES_TO_NAMES;

typedef struct _Spark__isset {
  _Spark__isset() : sparkID(false) {}
  bool sparkID;
} _Spark__isset;

class Spark {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  Spark() : sparkID(0) {
  }

  virtual ~Spark() throw() {}

  int32_t sparkID;

  _Spark__isset __isset;

  void __set_sparkID(const int32_t val) {
    sparkID = val;
  }

  bool operator == (const Spark & rhs) const
  {
    if (!(sparkID == rhs.sparkID))
      return false;
    return true;
  }
  bool operator != (const Spark &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spark & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Spark &a, Spark &b);

typedef struct _Location__isset {
  _Location__isset() : x(false), y(false), z(false) {}
  bool x;
  bool y;
  bool z;
} _Location__isset;

class Location {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

  Location() : x(0), y(0), z(0) {
  }

  virtual ~Location() throw() {}

  int32_t x;
  int32_t y;
  int32_t z;

  _Location__isset __isset;

  void __set_x(const int32_t val) {
    x = val;
  }

  void __set_y(const int32_t val) {
    y = val;
  }

  void __set_z(const int32_t val) {
    z = val;
  }

  bool operator == (const Location & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    return true;
  }
  bool operator != (const Location &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Location & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Location &a, Location &b);

} // namespace

#endif
