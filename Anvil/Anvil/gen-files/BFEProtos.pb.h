// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BFEProtos.proto

#ifndef PROTOBUF_BFEProtos_2eproto__INCLUDED
#define PROTOBUF_BFEProtos_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Thilenius {
namespace BFEProtos {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BFEProtos_2eproto();
void protobuf_AssignDesc_BFEProtos_2eproto();
void protobuf_ShutdownFile_BFEProtos_2eproto();

class BFEMessage;
class BFEAuthRequest;
class BFEAuthResponse;
class BFELoadLevelRequest;
class BFELoadLevelResponse;
class BFESparkCommand;
class BFESparkResponse;

enum BFESparkCommand_CommandType {
  BFESparkCommand_CommandType_MOVE_FORWARD = 0,
  BFESparkCommand_CommandType_MOVE_BACKWARD = 1,
  BFESparkCommand_CommandType_MOVE_UP = 2,
  BFESparkCommand_CommandType_MOVE_DOWN = 3,
  BFESparkCommand_CommandType_TURN_LEFT = 4,
  BFESparkCommand_CommandType_TURN_RIGHT = 5
};
bool BFESparkCommand_CommandType_IsValid(int value);
const BFESparkCommand_CommandType BFESparkCommand_CommandType_CommandType_MIN = BFESparkCommand_CommandType_MOVE_FORWARD;
const BFESparkCommand_CommandType BFESparkCommand_CommandType_CommandType_MAX = BFESparkCommand_CommandType_TURN_RIGHT;
const int BFESparkCommand_CommandType_CommandType_ARRAYSIZE = BFESparkCommand_CommandType_CommandType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BFESparkCommand_CommandType_descriptor();
inline const ::std::string& BFESparkCommand_CommandType_Name(BFESparkCommand_CommandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BFESparkCommand_CommandType_descriptor(), value);
}
inline bool BFESparkCommand_CommandType_Parse(
    const ::std::string& name, BFESparkCommand_CommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BFESparkCommand_CommandType>(
    BFESparkCommand_CommandType_descriptor(), name, value);
}
// ===================================================================

class BFEMessage : public ::google::protobuf::Message {
 public:
  BFEMessage();
  virtual ~BFEMessage();
  
  BFEMessage(const BFEMessage& from);
  
  inline BFEMessage& operator=(const BFEMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BFEMessage& default_instance();
  
  void Swap(BFEMessage* other);
  
  // implements Message ----------------------------------------------
  
  BFEMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BFEMessage& from);
  void MergeFrom(const BFEMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BFEMessage)
  // @@protoc_insertion_point(class_scope:Thilenius.BFEProtos.BFEMessage)
 private:
  
  ::google::protobuf::internal::ExtensionSet _extensions_;
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_BFEProtos_2eproto();
  friend void protobuf_AssignDesc_BFEProtos_2eproto();
  friend void protobuf_ShutdownFile_BFEProtos_2eproto();
  
  void InitAsDefaultInstance();
  static BFEMessage* default_instance_;
};
// -------------------------------------------------------------------

class BFEAuthRequest : public ::google::protobuf::Message {
 public:
  BFEAuthRequest();
  virtual ~BFEAuthRequest();
  
  BFEAuthRequest(const BFEAuthRequest& from);
  
  inline BFEAuthRequest& operator=(const BFEAuthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BFEAuthRequest& default_instance();
  
  void Swap(BFEAuthRequest* other);
  
  // implements Message ----------------------------------------------
  
  BFEAuthRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BFEAuthRequest& from);
  void MergeFrom(const BFEAuthRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  
  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  static const int kBFEAuthRequestExtFieldNumber = 100;
  static ::google::protobuf::internal::ExtensionIdentifier< ::Thilenius::BFEProtos::BFEMessage,
      ::google::protobuf::internal::MessageTypeTraits< ::Thilenius::BFEProtos::BFEAuthRequest >, 11, false >
    BFEAuthRequest_ext;
  // @@protoc_insertion_point(class_scope:Thilenius.BFEProtos.BFEAuthRequest)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* username_;
  ::std::string* password_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_BFEProtos_2eproto();
  friend void protobuf_AssignDesc_BFEProtos_2eproto();
  friend void protobuf_ShutdownFile_BFEProtos_2eproto();
  
  void InitAsDefaultInstance();
  static BFEAuthRequest* default_instance_;
};
// -------------------------------------------------------------------

class BFEAuthResponse : public ::google::protobuf::Message {
 public:
  BFEAuthResponse();
  virtual ~BFEAuthResponse();
  
  BFEAuthResponse(const BFEAuthResponse& from);
  
  inline BFEAuthResponse& operator=(const BFEAuthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BFEAuthResponse& default_instance();
  
  void Swap(BFEAuthResponse* other);
  
  // implements Message ----------------------------------------------
  
  BFEAuthResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BFEAuthResponse& from);
  void MergeFrom(const BFEAuthResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string auth_token = 1;
  inline bool has_auth_token() const;
  inline void clear_auth_token();
  static const int kAuthTokenFieldNumber = 1;
  inline const ::std::string& auth_token() const;
  inline void set_auth_token(const ::std::string& value);
  inline void set_auth_token(const char* value);
  inline void set_auth_token(const char* value, size_t size);
  inline ::std::string* mutable_auth_token();
  inline ::std::string* release_auth_token();
  
  // optional string failure_reason = 2;
  inline bool has_failure_reason() const;
  inline void clear_failure_reason();
  static const int kFailureReasonFieldNumber = 2;
  inline const ::std::string& failure_reason() const;
  inline void set_failure_reason(const ::std::string& value);
  inline void set_failure_reason(const char* value);
  inline void set_failure_reason(const char* value, size_t size);
  inline ::std::string* mutable_failure_reason();
  inline ::std::string* release_failure_reason();
  
  static const int kBFEAuthResponseExtFieldNumber = 101;
  static ::google::protobuf::internal::ExtensionIdentifier< ::Thilenius::BFEProtos::BFEMessage,
      ::google::protobuf::internal::MessageTypeTraits< ::Thilenius::BFEProtos::BFEAuthResponse >, 11, false >
    BFEAuthResponse_ext;
  // @@protoc_insertion_point(class_scope:Thilenius.BFEProtos.BFEAuthResponse)
 private:
  inline void set_has_auth_token();
  inline void clear_has_auth_token();
  inline void set_has_failure_reason();
  inline void clear_has_failure_reason();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* auth_token_;
  ::std::string* failure_reason_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_BFEProtos_2eproto();
  friend void protobuf_AssignDesc_BFEProtos_2eproto();
  friend void protobuf_ShutdownFile_BFEProtos_2eproto();
  
  void InitAsDefaultInstance();
  static BFEAuthResponse* default_instance_;
};
// -------------------------------------------------------------------

class BFELoadLevelRequest : public ::google::protobuf::Message {
 public:
  BFELoadLevelRequest();
  virtual ~BFELoadLevelRequest();
  
  BFELoadLevelRequest(const BFELoadLevelRequest& from);
  
  inline BFELoadLevelRequest& operator=(const BFELoadLevelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BFELoadLevelRequest& default_instance();
  
  void Swap(BFELoadLevelRequest* other);
  
  // implements Message ----------------------------------------------
  
  BFELoadLevelRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BFELoadLevelRequest& from);
  void MergeFrom(const BFELoadLevelRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string auth_token = 1;
  inline bool has_auth_token() const;
  inline void clear_auth_token();
  static const int kAuthTokenFieldNumber = 1;
  inline const ::std::string& auth_token() const;
  inline void set_auth_token(const ::std::string& value);
  inline void set_auth_token(const char* value);
  inline void set_auth_token(const char* value, size_t size);
  inline ::std::string* mutable_auth_token();
  inline ::std::string* release_auth_token();
  
  // required string assignmentName = 2;
  inline bool has_assignmentname() const;
  inline void clear_assignmentname();
  static const int kAssignmentNameFieldNumber = 2;
  inline const ::std::string& assignmentname() const;
  inline void set_assignmentname(const ::std::string& value);
  inline void set_assignmentname(const char* value);
  inline void set_assignmentname(const char* value, size_t size);
  inline ::std::string* mutable_assignmentname();
  inline ::std::string* release_assignmentname();
  
  // required int32 levelNumber = 3;
  inline bool has_levelnumber() const;
  inline void clear_levelnumber();
  static const int kLevelNumberFieldNumber = 3;
  inline ::google::protobuf::int32 levelnumber() const;
  inline void set_levelnumber(::google::protobuf::int32 value);
  
  static const int kBFELoadLevelRequestExtFieldNumber = 102;
  static ::google::protobuf::internal::ExtensionIdentifier< ::Thilenius::BFEProtos::BFEMessage,
      ::google::protobuf::internal::MessageTypeTraits< ::Thilenius::BFEProtos::BFELoadLevelRequest >, 11, false >
    BFELoadLevelRequest_ext;
  // @@protoc_insertion_point(class_scope:Thilenius.BFEProtos.BFELoadLevelRequest)
 private:
  inline void set_has_auth_token();
  inline void clear_has_auth_token();
  inline void set_has_assignmentname();
  inline void clear_has_assignmentname();
  inline void set_has_levelnumber();
  inline void clear_has_levelnumber();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* auth_token_;
  ::std::string* assignmentname_;
  ::google::protobuf::int32 levelnumber_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_BFEProtos_2eproto();
  friend void protobuf_AssignDesc_BFEProtos_2eproto();
  friend void protobuf_ShutdownFile_BFEProtos_2eproto();
  
  void InitAsDefaultInstance();
  static BFELoadLevelRequest* default_instance_;
};
// -------------------------------------------------------------------

class BFELoadLevelResponse : public ::google::protobuf::Message {
 public:
  BFELoadLevelResponse();
  virtual ~BFELoadLevelResponse();
  
  BFELoadLevelResponse(const BFELoadLevelResponse& from);
  
  inline BFELoadLevelResponse& operator=(const BFELoadLevelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BFELoadLevelResponse& default_instance();
  
  void Swap(BFELoadLevelResponse* other);
  
  // implements Message ----------------------------------------------
  
  BFELoadLevelResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BFELoadLevelResponse& from);
  void MergeFrom(const BFELoadLevelResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string failure_reason = 1;
  inline bool has_failure_reason() const;
  inline void clear_failure_reason();
  static const int kFailureReasonFieldNumber = 1;
  inline const ::std::string& failure_reason() const;
  inline void set_failure_reason(const ::std::string& value);
  inline void set_failure_reason(const char* value);
  inline void set_failure_reason(const char* value, size_t size);
  inline ::std::string* mutable_failure_reason();
  inline ::std::string* release_failure_reason();
  
  // optional int32 spark_count = 2;
  inline bool has_spark_count() const;
  inline void clear_spark_count();
  static const int kSparkCountFieldNumber = 2;
  inline ::google::protobuf::int32 spark_count() const;
  inline void set_spark_count(::google::protobuf::int32 value);
  
  static const int kBFELoadLevelResponseExtFieldNumber = 103;
  static ::google::protobuf::internal::ExtensionIdentifier< ::Thilenius::BFEProtos::BFEMessage,
      ::google::protobuf::internal::MessageTypeTraits< ::Thilenius::BFEProtos::BFELoadLevelResponse >, 11, false >
    BFELoadLevelResponse_ext;
  // @@protoc_insertion_point(class_scope:Thilenius.BFEProtos.BFELoadLevelResponse)
 private:
  inline void set_has_failure_reason();
  inline void clear_has_failure_reason();
  inline void set_has_spark_count();
  inline void clear_has_spark_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* failure_reason_;
  ::google::protobuf::int32 spark_count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_BFEProtos_2eproto();
  friend void protobuf_AssignDesc_BFEProtos_2eproto();
  friend void protobuf_ShutdownFile_BFEProtos_2eproto();
  
  void InitAsDefaultInstance();
  static BFELoadLevelResponse* default_instance_;
};
// -------------------------------------------------------------------

class BFESparkCommand : public ::google::protobuf::Message {
 public:
  BFESparkCommand();
  virtual ~BFESparkCommand();
  
  BFESparkCommand(const BFESparkCommand& from);
  
  inline BFESparkCommand& operator=(const BFESparkCommand& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BFESparkCommand& default_instance();
  
  void Swap(BFESparkCommand* other);
  
  // implements Message ----------------------------------------------
  
  BFESparkCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BFESparkCommand& from);
  void MergeFrom(const BFESparkCommand& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef BFESparkCommand_CommandType CommandType;
  static const CommandType MOVE_FORWARD = BFESparkCommand_CommandType_MOVE_FORWARD;
  static const CommandType MOVE_BACKWARD = BFESparkCommand_CommandType_MOVE_BACKWARD;
  static const CommandType MOVE_UP = BFESparkCommand_CommandType_MOVE_UP;
  static const CommandType MOVE_DOWN = BFESparkCommand_CommandType_MOVE_DOWN;
  static const CommandType TURN_LEFT = BFESparkCommand_CommandType_TURN_LEFT;
  static const CommandType TURN_RIGHT = BFESparkCommand_CommandType_TURN_RIGHT;
  static inline bool CommandType_IsValid(int value) {
    return BFESparkCommand_CommandType_IsValid(value);
  }
  static const CommandType CommandType_MIN =
    BFESparkCommand_CommandType_CommandType_MIN;
  static const CommandType CommandType_MAX =
    BFESparkCommand_CommandType_CommandType_MAX;
  static const int CommandType_ARRAYSIZE =
    BFESparkCommand_CommandType_CommandType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CommandType_descriptor() {
    return BFESparkCommand_CommandType_descriptor();
  }
  static inline const ::std::string& CommandType_Name(CommandType value) {
    return BFESparkCommand_CommandType_Name(value);
  }
  static inline bool CommandType_Parse(const ::std::string& name,
      CommandType* value) {
    return BFESparkCommand_CommandType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .Thilenius.BFEProtos.BFESparkCommand.CommandType command = 1;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline ::Thilenius::BFEProtos::BFESparkCommand_CommandType command() const;
  inline void set_command(::Thilenius::BFEProtos::BFESparkCommand_CommandType value);
  
  // required int32 spark_id = 2;
  inline bool has_spark_id() const;
  inline void clear_spark_id();
  static const int kSparkIdFieldNumber = 2;
  inline ::google::protobuf::int32 spark_id() const;
  inline void set_spark_id(::google::protobuf::int32 value);
  
  // required string auth_token = 3;
  inline bool has_auth_token() const;
  inline void clear_auth_token();
  static const int kAuthTokenFieldNumber = 3;
  inline const ::std::string& auth_token() const;
  inline void set_auth_token(const ::std::string& value);
  inline void set_auth_token(const char* value);
  inline void set_auth_token(const char* value, size_t size);
  inline ::std::string* mutable_auth_token();
  inline ::std::string* release_auth_token();
  
  // optional string pipline_token = 4;
  inline bool has_pipline_token() const;
  inline void clear_pipline_token();
  static const int kPiplineTokenFieldNumber = 4;
  inline const ::std::string& pipline_token() const;
  inline void set_pipline_token(const ::std::string& value);
  inline void set_pipline_token(const char* value);
  inline void set_pipline_token(const char* value, size_t size);
  inline ::std::string* mutable_pipline_token();
  inline ::std::string* release_pipline_token();
  
  static const int kBFESparkCommandExtFieldNumber = 104;
  static ::google::protobuf::internal::ExtensionIdentifier< ::Thilenius::BFEProtos::BFEMessage,
      ::google::protobuf::internal::MessageTypeTraits< ::Thilenius::BFEProtos::BFESparkCommand >, 11, false >
    BFESparkCommand_ext;
  // @@protoc_insertion_point(class_scope:Thilenius.BFEProtos.BFESparkCommand)
 private:
  inline void set_has_command();
  inline void clear_has_command();
  inline void set_has_spark_id();
  inline void clear_has_spark_id();
  inline void set_has_auth_token();
  inline void clear_has_auth_token();
  inline void set_has_pipline_token();
  inline void clear_has_pipline_token();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int command_;
  ::google::protobuf::int32 spark_id_;
  ::std::string* auth_token_;
  ::std::string* pipline_token_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_BFEProtos_2eproto();
  friend void protobuf_AssignDesc_BFEProtos_2eproto();
  friend void protobuf_ShutdownFile_BFEProtos_2eproto();
  
  void InitAsDefaultInstance();
  static BFESparkCommand* default_instance_;
};
// -------------------------------------------------------------------

class BFESparkResponse : public ::google::protobuf::Message {
 public:
  BFESparkResponse();
  virtual ~BFESparkResponse();
  
  BFESparkResponse(const BFESparkResponse& from);
  
  inline BFESparkResponse& operator=(const BFESparkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BFESparkResponse& default_instance();
  
  void Swap(BFESparkResponse* other);
  
  // implements Message ----------------------------------------------
  
  BFESparkResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BFESparkResponse& from);
  void MergeFrom(const BFESparkResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string pipline_token = 1;
  inline bool has_pipline_token() const;
  inline void clear_pipline_token();
  static const int kPiplineTokenFieldNumber = 1;
  inline const ::std::string& pipline_token() const;
  inline void set_pipline_token(const ::std::string& value);
  inline void set_pipline_token(const char* value);
  inline void set_pipline_token(const char* value, size_t size);
  inline ::std::string* mutable_pipline_token();
  inline ::std::string* release_pipline_token();
  
  // optional string failure_reason = 2;
  inline bool has_failure_reason() const;
  inline void clear_failure_reason();
  static const int kFailureReasonFieldNumber = 2;
  inline const ::std::string& failure_reason() const;
  inline void set_failure_reason(const ::std::string& value);
  inline void set_failure_reason(const char* value);
  inline void set_failure_reason(const char* value, size_t size);
  inline ::std::string* mutable_failure_reason();
  inline ::std::string* release_failure_reason();
  
  // optional bool response_bool = 3;
  inline bool has_response_bool() const;
  inline void clear_response_bool();
  static const int kResponseBoolFieldNumber = 3;
  inline bool response_bool() const;
  inline void set_response_bool(bool value);
  
  // optional int32 response_int = 4;
  inline bool has_response_int() const;
  inline void clear_response_int();
  static const int kResponseIntFieldNumber = 4;
  inline ::google::protobuf::int32 response_int() const;
  inline void set_response_int(::google::protobuf::int32 value);
  
  // optional float response_float = 5;
  inline bool has_response_float() const;
  inline void clear_response_float();
  static const int kResponseFloatFieldNumber = 5;
  inline float response_float() const;
  inline void set_response_float(float value);
  
  // optional bytes response_bytes = 6;
  inline bool has_response_bytes() const;
  inline void clear_response_bytes();
  static const int kResponseBytesFieldNumber = 6;
  inline const ::std::string& response_bytes() const;
  inline void set_response_bytes(const ::std::string& value);
  inline void set_response_bytes(const char* value);
  inline void set_response_bytes(const void* value, size_t size);
  inline ::std::string* mutable_response_bytes();
  inline ::std::string* release_response_bytes();
  
  static const int kBFESparkResponseExtFieldNumber = 105;
  static ::google::protobuf::internal::ExtensionIdentifier< ::Thilenius::BFEProtos::BFEMessage,
      ::google::protobuf::internal::MessageTypeTraits< ::Thilenius::BFEProtos::BFESparkResponse >, 11, false >
    BFESparkResponse_ext;
  // @@protoc_insertion_point(class_scope:Thilenius.BFEProtos.BFESparkResponse)
 private:
  inline void set_has_pipline_token();
  inline void clear_has_pipline_token();
  inline void set_has_failure_reason();
  inline void clear_has_failure_reason();
  inline void set_has_response_bool();
  inline void clear_has_response_bool();
  inline void set_has_response_int();
  inline void clear_has_response_int();
  inline void set_has_response_float();
  inline void clear_has_response_float();
  inline void set_has_response_bytes();
  inline void clear_has_response_bytes();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* pipline_token_;
  ::std::string* failure_reason_;
  bool response_bool_;
  ::google::protobuf::int32 response_int_;
  ::std::string* response_bytes_;
  float response_float_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_BFEProtos_2eproto();
  friend void protobuf_AssignDesc_BFEProtos_2eproto();
  friend void protobuf_ShutdownFile_BFEProtos_2eproto();
  
  void InitAsDefaultInstance();
  static BFESparkResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// BFEMessage

// -------------------------------------------------------------------

// BFEAuthRequest

// required string username = 1;
inline bool BFEAuthRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BFEAuthRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BFEAuthRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BFEAuthRequest::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& BFEAuthRequest::username() const {
  return *username_;
}
inline void BFEAuthRequest::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void BFEAuthRequest::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void BFEAuthRequest::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BFEAuthRequest::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* BFEAuthRequest::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string password = 2;
inline bool BFEAuthRequest::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BFEAuthRequest::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BFEAuthRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BFEAuthRequest::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& BFEAuthRequest::password() const {
  return *password_;
}
inline void BFEAuthRequest::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void BFEAuthRequest::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void BFEAuthRequest::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BFEAuthRequest::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* BFEAuthRequest::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// BFEAuthResponse

// required string auth_token = 1;
inline bool BFEAuthResponse::has_auth_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BFEAuthResponse::set_has_auth_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BFEAuthResponse::clear_has_auth_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BFEAuthResponse::clear_auth_token() {
  if (auth_token_ != &::google::protobuf::internal::kEmptyString) {
    auth_token_->clear();
  }
  clear_has_auth_token();
}
inline const ::std::string& BFEAuthResponse::auth_token() const {
  return *auth_token_;
}
inline void BFEAuthResponse::set_auth_token(const ::std::string& value) {
  set_has_auth_token();
  if (auth_token_ == &::google::protobuf::internal::kEmptyString) {
    auth_token_ = new ::std::string;
  }
  auth_token_->assign(value);
}
inline void BFEAuthResponse::set_auth_token(const char* value) {
  set_has_auth_token();
  if (auth_token_ == &::google::protobuf::internal::kEmptyString) {
    auth_token_ = new ::std::string;
  }
  auth_token_->assign(value);
}
inline void BFEAuthResponse::set_auth_token(const char* value, size_t size) {
  set_has_auth_token();
  if (auth_token_ == &::google::protobuf::internal::kEmptyString) {
    auth_token_ = new ::std::string;
  }
  auth_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BFEAuthResponse::mutable_auth_token() {
  set_has_auth_token();
  if (auth_token_ == &::google::protobuf::internal::kEmptyString) {
    auth_token_ = new ::std::string;
  }
  return auth_token_;
}
inline ::std::string* BFEAuthResponse::release_auth_token() {
  clear_has_auth_token();
  if (auth_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = auth_token_;
    auth_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string failure_reason = 2;
inline bool BFEAuthResponse::has_failure_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BFEAuthResponse::set_has_failure_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BFEAuthResponse::clear_has_failure_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BFEAuthResponse::clear_failure_reason() {
  if (failure_reason_ != &::google::protobuf::internal::kEmptyString) {
    failure_reason_->clear();
  }
  clear_has_failure_reason();
}
inline const ::std::string& BFEAuthResponse::failure_reason() const {
  return *failure_reason_;
}
inline void BFEAuthResponse::set_failure_reason(const ::std::string& value) {
  set_has_failure_reason();
  if (failure_reason_ == &::google::protobuf::internal::kEmptyString) {
    failure_reason_ = new ::std::string;
  }
  failure_reason_->assign(value);
}
inline void BFEAuthResponse::set_failure_reason(const char* value) {
  set_has_failure_reason();
  if (failure_reason_ == &::google::protobuf::internal::kEmptyString) {
    failure_reason_ = new ::std::string;
  }
  failure_reason_->assign(value);
}
inline void BFEAuthResponse::set_failure_reason(const char* value, size_t size) {
  set_has_failure_reason();
  if (failure_reason_ == &::google::protobuf::internal::kEmptyString) {
    failure_reason_ = new ::std::string;
  }
  failure_reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BFEAuthResponse::mutable_failure_reason() {
  set_has_failure_reason();
  if (failure_reason_ == &::google::protobuf::internal::kEmptyString) {
    failure_reason_ = new ::std::string;
  }
  return failure_reason_;
}
inline ::std::string* BFEAuthResponse::release_failure_reason() {
  clear_has_failure_reason();
  if (failure_reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = failure_reason_;
    failure_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// BFELoadLevelRequest

// required string auth_token = 1;
inline bool BFELoadLevelRequest::has_auth_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BFELoadLevelRequest::set_has_auth_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BFELoadLevelRequest::clear_has_auth_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BFELoadLevelRequest::clear_auth_token() {
  if (auth_token_ != &::google::protobuf::internal::kEmptyString) {
    auth_token_->clear();
  }
  clear_has_auth_token();
}
inline const ::std::string& BFELoadLevelRequest::auth_token() const {
  return *auth_token_;
}
inline void BFELoadLevelRequest::set_auth_token(const ::std::string& value) {
  set_has_auth_token();
  if (auth_token_ == &::google::protobuf::internal::kEmptyString) {
    auth_token_ = new ::std::string;
  }
  auth_token_->assign(value);
}
inline void BFELoadLevelRequest::set_auth_token(const char* value) {
  set_has_auth_token();
  if (auth_token_ == &::google::protobuf::internal::kEmptyString) {
    auth_token_ = new ::std::string;
  }
  auth_token_->assign(value);
}
inline void BFELoadLevelRequest::set_auth_token(const char* value, size_t size) {
  set_has_auth_token();
  if (auth_token_ == &::google::protobuf::internal::kEmptyString) {
    auth_token_ = new ::std::string;
  }
  auth_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BFELoadLevelRequest::mutable_auth_token() {
  set_has_auth_token();
  if (auth_token_ == &::google::protobuf::internal::kEmptyString) {
    auth_token_ = new ::std::string;
  }
  return auth_token_;
}
inline ::std::string* BFELoadLevelRequest::release_auth_token() {
  clear_has_auth_token();
  if (auth_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = auth_token_;
    auth_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string assignmentName = 2;
inline bool BFELoadLevelRequest::has_assignmentname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BFELoadLevelRequest::set_has_assignmentname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BFELoadLevelRequest::clear_has_assignmentname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BFELoadLevelRequest::clear_assignmentname() {
  if (assignmentname_ != &::google::protobuf::internal::kEmptyString) {
    assignmentname_->clear();
  }
  clear_has_assignmentname();
}
inline const ::std::string& BFELoadLevelRequest::assignmentname() const {
  return *assignmentname_;
}
inline void BFELoadLevelRequest::set_assignmentname(const ::std::string& value) {
  set_has_assignmentname();
  if (assignmentname_ == &::google::protobuf::internal::kEmptyString) {
    assignmentname_ = new ::std::string;
  }
  assignmentname_->assign(value);
}
inline void BFELoadLevelRequest::set_assignmentname(const char* value) {
  set_has_assignmentname();
  if (assignmentname_ == &::google::protobuf::internal::kEmptyString) {
    assignmentname_ = new ::std::string;
  }
  assignmentname_->assign(value);
}
inline void BFELoadLevelRequest::set_assignmentname(const char* value, size_t size) {
  set_has_assignmentname();
  if (assignmentname_ == &::google::protobuf::internal::kEmptyString) {
    assignmentname_ = new ::std::string;
  }
  assignmentname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BFELoadLevelRequest::mutable_assignmentname() {
  set_has_assignmentname();
  if (assignmentname_ == &::google::protobuf::internal::kEmptyString) {
    assignmentname_ = new ::std::string;
  }
  return assignmentname_;
}
inline ::std::string* BFELoadLevelRequest::release_assignmentname() {
  clear_has_assignmentname();
  if (assignmentname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = assignmentname_;
    assignmentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 levelNumber = 3;
inline bool BFELoadLevelRequest::has_levelnumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BFELoadLevelRequest::set_has_levelnumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BFELoadLevelRequest::clear_has_levelnumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BFELoadLevelRequest::clear_levelnumber() {
  levelnumber_ = 0;
  clear_has_levelnumber();
}
inline ::google::protobuf::int32 BFELoadLevelRequest::levelnumber() const {
  return levelnumber_;
}
inline void BFELoadLevelRequest::set_levelnumber(::google::protobuf::int32 value) {
  set_has_levelnumber();
  levelnumber_ = value;
}

// -------------------------------------------------------------------

// BFELoadLevelResponse

// optional string failure_reason = 1;
inline bool BFELoadLevelResponse::has_failure_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BFELoadLevelResponse::set_has_failure_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BFELoadLevelResponse::clear_has_failure_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BFELoadLevelResponse::clear_failure_reason() {
  if (failure_reason_ != &::google::protobuf::internal::kEmptyString) {
    failure_reason_->clear();
  }
  clear_has_failure_reason();
}
inline const ::std::string& BFELoadLevelResponse::failure_reason() const {
  return *failure_reason_;
}
inline void BFELoadLevelResponse::set_failure_reason(const ::std::string& value) {
  set_has_failure_reason();
  if (failure_reason_ == &::google::protobuf::internal::kEmptyString) {
    failure_reason_ = new ::std::string;
  }
  failure_reason_->assign(value);
}
inline void BFELoadLevelResponse::set_failure_reason(const char* value) {
  set_has_failure_reason();
  if (failure_reason_ == &::google::protobuf::internal::kEmptyString) {
    failure_reason_ = new ::std::string;
  }
  failure_reason_->assign(value);
}
inline void BFELoadLevelResponse::set_failure_reason(const char* value, size_t size) {
  set_has_failure_reason();
  if (failure_reason_ == &::google::protobuf::internal::kEmptyString) {
    failure_reason_ = new ::std::string;
  }
  failure_reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BFELoadLevelResponse::mutable_failure_reason() {
  set_has_failure_reason();
  if (failure_reason_ == &::google::protobuf::internal::kEmptyString) {
    failure_reason_ = new ::std::string;
  }
  return failure_reason_;
}
inline ::std::string* BFELoadLevelResponse::release_failure_reason() {
  clear_has_failure_reason();
  if (failure_reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = failure_reason_;
    failure_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 spark_count = 2;
inline bool BFELoadLevelResponse::has_spark_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BFELoadLevelResponse::set_has_spark_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BFELoadLevelResponse::clear_has_spark_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BFELoadLevelResponse::clear_spark_count() {
  spark_count_ = 0;
  clear_has_spark_count();
}
inline ::google::protobuf::int32 BFELoadLevelResponse::spark_count() const {
  return spark_count_;
}
inline void BFELoadLevelResponse::set_spark_count(::google::protobuf::int32 value) {
  set_has_spark_count();
  spark_count_ = value;
}

// -------------------------------------------------------------------

// BFESparkCommand

// required .Thilenius.BFEProtos.BFESparkCommand.CommandType command = 1;
inline bool BFESparkCommand::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BFESparkCommand::set_has_command() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BFESparkCommand::clear_has_command() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BFESparkCommand::clear_command() {
  command_ = 0;
  clear_has_command();
}
inline ::Thilenius::BFEProtos::BFESparkCommand_CommandType BFESparkCommand::command() const {
  return static_cast< ::Thilenius::BFEProtos::BFESparkCommand_CommandType >(command_);
}
inline void BFESparkCommand::set_command(::Thilenius::BFEProtos::BFESparkCommand_CommandType value) {
  GOOGLE_DCHECK(::Thilenius::BFEProtos::BFESparkCommand_CommandType_IsValid(value));
  set_has_command();
  command_ = value;
}

// required int32 spark_id = 2;
inline bool BFESparkCommand::has_spark_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BFESparkCommand::set_has_spark_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BFESparkCommand::clear_has_spark_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BFESparkCommand::clear_spark_id() {
  spark_id_ = 0;
  clear_has_spark_id();
}
inline ::google::protobuf::int32 BFESparkCommand::spark_id() const {
  return spark_id_;
}
inline void BFESparkCommand::set_spark_id(::google::protobuf::int32 value) {
  set_has_spark_id();
  spark_id_ = value;
}

// required string auth_token = 3;
inline bool BFESparkCommand::has_auth_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BFESparkCommand::set_has_auth_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BFESparkCommand::clear_has_auth_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BFESparkCommand::clear_auth_token() {
  if (auth_token_ != &::google::protobuf::internal::kEmptyString) {
    auth_token_->clear();
  }
  clear_has_auth_token();
}
inline const ::std::string& BFESparkCommand::auth_token() const {
  return *auth_token_;
}
inline void BFESparkCommand::set_auth_token(const ::std::string& value) {
  set_has_auth_token();
  if (auth_token_ == &::google::protobuf::internal::kEmptyString) {
    auth_token_ = new ::std::string;
  }
  auth_token_->assign(value);
}
inline void BFESparkCommand::set_auth_token(const char* value) {
  set_has_auth_token();
  if (auth_token_ == &::google::protobuf::internal::kEmptyString) {
    auth_token_ = new ::std::string;
  }
  auth_token_->assign(value);
}
inline void BFESparkCommand::set_auth_token(const char* value, size_t size) {
  set_has_auth_token();
  if (auth_token_ == &::google::protobuf::internal::kEmptyString) {
    auth_token_ = new ::std::string;
  }
  auth_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BFESparkCommand::mutable_auth_token() {
  set_has_auth_token();
  if (auth_token_ == &::google::protobuf::internal::kEmptyString) {
    auth_token_ = new ::std::string;
  }
  return auth_token_;
}
inline ::std::string* BFESparkCommand::release_auth_token() {
  clear_has_auth_token();
  if (auth_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = auth_token_;
    auth_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string pipline_token = 4;
inline bool BFESparkCommand::has_pipline_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BFESparkCommand::set_has_pipline_token() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BFESparkCommand::clear_has_pipline_token() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BFESparkCommand::clear_pipline_token() {
  if (pipline_token_ != &::google::protobuf::internal::kEmptyString) {
    pipline_token_->clear();
  }
  clear_has_pipline_token();
}
inline const ::std::string& BFESparkCommand::pipline_token() const {
  return *pipline_token_;
}
inline void BFESparkCommand::set_pipline_token(const ::std::string& value) {
  set_has_pipline_token();
  if (pipline_token_ == &::google::protobuf::internal::kEmptyString) {
    pipline_token_ = new ::std::string;
  }
  pipline_token_->assign(value);
}
inline void BFESparkCommand::set_pipline_token(const char* value) {
  set_has_pipline_token();
  if (pipline_token_ == &::google::protobuf::internal::kEmptyString) {
    pipline_token_ = new ::std::string;
  }
  pipline_token_->assign(value);
}
inline void BFESparkCommand::set_pipline_token(const char* value, size_t size) {
  set_has_pipline_token();
  if (pipline_token_ == &::google::protobuf::internal::kEmptyString) {
    pipline_token_ = new ::std::string;
  }
  pipline_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BFESparkCommand::mutable_pipline_token() {
  set_has_pipline_token();
  if (pipline_token_ == &::google::protobuf::internal::kEmptyString) {
    pipline_token_ = new ::std::string;
  }
  return pipline_token_;
}
inline ::std::string* BFESparkCommand::release_pipline_token() {
  clear_has_pipline_token();
  if (pipline_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pipline_token_;
    pipline_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// BFESparkResponse

// optional string pipline_token = 1;
inline bool BFESparkResponse::has_pipline_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BFESparkResponse::set_has_pipline_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BFESparkResponse::clear_has_pipline_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BFESparkResponse::clear_pipline_token() {
  if (pipline_token_ != &::google::protobuf::internal::kEmptyString) {
    pipline_token_->clear();
  }
  clear_has_pipline_token();
}
inline const ::std::string& BFESparkResponse::pipline_token() const {
  return *pipline_token_;
}
inline void BFESparkResponse::set_pipline_token(const ::std::string& value) {
  set_has_pipline_token();
  if (pipline_token_ == &::google::protobuf::internal::kEmptyString) {
    pipline_token_ = new ::std::string;
  }
  pipline_token_->assign(value);
}
inline void BFESparkResponse::set_pipline_token(const char* value) {
  set_has_pipline_token();
  if (pipline_token_ == &::google::protobuf::internal::kEmptyString) {
    pipline_token_ = new ::std::string;
  }
  pipline_token_->assign(value);
}
inline void BFESparkResponse::set_pipline_token(const char* value, size_t size) {
  set_has_pipline_token();
  if (pipline_token_ == &::google::protobuf::internal::kEmptyString) {
    pipline_token_ = new ::std::string;
  }
  pipline_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BFESparkResponse::mutable_pipline_token() {
  set_has_pipline_token();
  if (pipline_token_ == &::google::protobuf::internal::kEmptyString) {
    pipline_token_ = new ::std::string;
  }
  return pipline_token_;
}
inline ::std::string* BFESparkResponse::release_pipline_token() {
  clear_has_pipline_token();
  if (pipline_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pipline_token_;
    pipline_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string failure_reason = 2;
inline bool BFESparkResponse::has_failure_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BFESparkResponse::set_has_failure_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BFESparkResponse::clear_has_failure_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BFESparkResponse::clear_failure_reason() {
  if (failure_reason_ != &::google::protobuf::internal::kEmptyString) {
    failure_reason_->clear();
  }
  clear_has_failure_reason();
}
inline const ::std::string& BFESparkResponse::failure_reason() const {
  return *failure_reason_;
}
inline void BFESparkResponse::set_failure_reason(const ::std::string& value) {
  set_has_failure_reason();
  if (failure_reason_ == &::google::protobuf::internal::kEmptyString) {
    failure_reason_ = new ::std::string;
  }
  failure_reason_->assign(value);
}
inline void BFESparkResponse::set_failure_reason(const char* value) {
  set_has_failure_reason();
  if (failure_reason_ == &::google::protobuf::internal::kEmptyString) {
    failure_reason_ = new ::std::string;
  }
  failure_reason_->assign(value);
}
inline void BFESparkResponse::set_failure_reason(const char* value, size_t size) {
  set_has_failure_reason();
  if (failure_reason_ == &::google::protobuf::internal::kEmptyString) {
    failure_reason_ = new ::std::string;
  }
  failure_reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BFESparkResponse::mutable_failure_reason() {
  set_has_failure_reason();
  if (failure_reason_ == &::google::protobuf::internal::kEmptyString) {
    failure_reason_ = new ::std::string;
  }
  return failure_reason_;
}
inline ::std::string* BFESparkResponse::release_failure_reason() {
  clear_has_failure_reason();
  if (failure_reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = failure_reason_;
    failure_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool response_bool = 3;
inline bool BFESparkResponse::has_response_bool() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BFESparkResponse::set_has_response_bool() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BFESparkResponse::clear_has_response_bool() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BFESparkResponse::clear_response_bool() {
  response_bool_ = false;
  clear_has_response_bool();
}
inline bool BFESparkResponse::response_bool() const {
  return response_bool_;
}
inline void BFESparkResponse::set_response_bool(bool value) {
  set_has_response_bool();
  response_bool_ = value;
}

// optional int32 response_int = 4;
inline bool BFESparkResponse::has_response_int() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BFESparkResponse::set_has_response_int() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BFESparkResponse::clear_has_response_int() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BFESparkResponse::clear_response_int() {
  response_int_ = 0;
  clear_has_response_int();
}
inline ::google::protobuf::int32 BFESparkResponse::response_int() const {
  return response_int_;
}
inline void BFESparkResponse::set_response_int(::google::protobuf::int32 value) {
  set_has_response_int();
  response_int_ = value;
}

// optional float response_float = 5;
inline bool BFESparkResponse::has_response_float() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BFESparkResponse::set_has_response_float() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BFESparkResponse::clear_has_response_float() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BFESparkResponse::clear_response_float() {
  response_float_ = 0;
  clear_has_response_float();
}
inline float BFESparkResponse::response_float() const {
  return response_float_;
}
inline void BFESparkResponse::set_response_float(float value) {
  set_has_response_float();
  response_float_ = value;
}

// optional bytes response_bytes = 6;
inline bool BFESparkResponse::has_response_bytes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BFESparkResponse::set_has_response_bytes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BFESparkResponse::clear_has_response_bytes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BFESparkResponse::clear_response_bytes() {
  if (response_bytes_ != &::google::protobuf::internal::kEmptyString) {
    response_bytes_->clear();
  }
  clear_has_response_bytes();
}
inline const ::std::string& BFESparkResponse::response_bytes() const {
  return *response_bytes_;
}
inline void BFESparkResponse::set_response_bytes(const ::std::string& value) {
  set_has_response_bytes();
  if (response_bytes_ == &::google::protobuf::internal::kEmptyString) {
    response_bytes_ = new ::std::string;
  }
  response_bytes_->assign(value);
}
inline void BFESparkResponse::set_response_bytes(const char* value) {
  set_has_response_bytes();
  if (response_bytes_ == &::google::protobuf::internal::kEmptyString) {
    response_bytes_ = new ::std::string;
  }
  response_bytes_->assign(value);
}
inline void BFESparkResponse::set_response_bytes(const void* value, size_t size) {
  set_has_response_bytes();
  if (response_bytes_ == &::google::protobuf::internal::kEmptyString) {
    response_bytes_ = new ::std::string;
  }
  response_bytes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BFESparkResponse::mutable_response_bytes() {
  set_has_response_bytes();
  if (response_bytes_ == &::google::protobuf::internal::kEmptyString) {
    response_bytes_ = new ::std::string;
  }
  return response_bytes_;
}
inline ::std::string* BFESparkResponse::release_response_bytes() {
  clear_has_response_bytes();
  if (response_bytes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = response_bytes_;
    response_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace BFEProtos
}  // namespace Thilenius

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Thilenius::BFEProtos::BFESparkCommand_CommandType>() {
  return ::Thilenius::BFEProtos::BFESparkCommand_CommandType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BFEProtos_2eproto__INCLUDED
